{"version":3,"sources":["../node_modules/getos sync","components/control/TestControlDashboard.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","TestControlDashboard","console","log","process","CONNECTION_STRING","client","Client","fromConnectionString","methodParams","methodName","payload","responseTimeoutInSeconds","className","variant","color","endIcon","onClick","invokeDeviceMethod","err","result","error","message","JSON","stringify"],"mappings":"mOAAA,SAASA,EAAoBC,GAC5B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBF,EAAM,KAEjD,MADAC,EAAEE,KAAO,mBACHF,EAEPF,EAAoBK,KAAO,WAAa,MAAO,IAC/CL,EAAoBM,QAAUN,EAC9BO,EAAOC,QAAUR,EACjBA,EAAoBS,GAAK,K,qDCRzB,8DA4DeC,UA/CwB,WACrCC,QAAQC,IAAR,qBAA0BC,mHAAYC,oBACtC,IAAMC,EAASC,SAAOC,qBACpBJ,mHAAYC,mBAAqB,IAI7BI,EAAe,CACnBC,WAAY,gBACZC,SAAS,EACTC,yBAA0B,IAuB5B,OACE,yBAAKC,UAAU,uCACb,kBAAC,IAAD,CACEC,QAAQ,YACRC,MAAM,UACNC,QAAS,kBAAC,IAAD,aACTC,QAxBU,WACdX,EAAOY,mBAHQ,cAGqBT,GAAc,SAACU,EAAKC,GAClDD,EACFjB,QAAQmB,MACN,4BACEZ,EAAaC,WACb,MACAS,EAAIG,UAGRpB,QAAQC,IACN,iBAAmBM,EAAaC,WAAa,oBAE/CR,QAAQC,IAAIoB,KAAKC,UAAUJ,EAAQ,KAAM,UAO3C","file":"static/js/5.5834b172.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 349;","/**\n * Creation Date: February 19, 2020\n * Author: Luke Slevinsky\n * A test page for talking with the Pi\n */\n\nimport React from \"react\";\nimport \"../../Dashboard.css\";\n\nimport { Button } from \"@material-ui/core\";\nimport Icon from \"@material-ui/core/Icon\";\nimport { Client } from \"azure-iothub\";\n\nconst TestControlDashboard: React.FC = () => {\n  console.log(`con string ${process.env.CONNECTION_STRING}`);\n  const client = Client.fromConnectionString(\n    process.env.CONNECTION_STRING || \"\"\n  );\n\n  // Set the direct method name, payload, and timeout values\n  const methodParams = {\n    methodName: \"SetBlinkLight\",\n    payload: true, // Number of seconds.\n    responseTimeoutInSeconds: 30\n  };\n\n  const deviceId = \"RaspberryPi\";\n\n  const onClick = () => {\n    client.invokeDeviceMethod(deviceId, methodParams, (err, result) => {\n      if (err) {\n        console.error(\n          \"Failed to invoke method '\" +\n            methodParams.methodName +\n            \"': \" +\n            err.message\n        );\n      } else {\n        console.log(\n          \"Response from \" + methodParams.methodName + \" on \" + deviceId + \":\"\n        );\n        console.log(JSON.stringify(result, null, 2));\n      }\n    });\n  };\n\n  return (\n    <div className=\"moisture-dashboard column-container\">\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        endIcon={<Icon>send</Icon>}\n        onClick={onClick}\n      >\n        Send\n      </Button>\n    </div>\n  );\n};\n\nexport default TestControlDashboard;\n"],"sourceRoot":""}