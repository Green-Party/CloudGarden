{"version":3,"sources":["components/Logo.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["width","height","viewBox","version","id","stroke","strokeWidth","fill","fillRule","transform","d","Header","className","IconButton","onClick","props","onMenuClick","htmlColor","Logo","React","Component","Home","lazy","ControlView","NavListItem","text","icon","to","ListItem","button","component","NavLink","activeClassName","ListItemIcon","ListItemText","primary","App","useState","open","setOpen","fallback","path","exact","Drawer","onClose","List","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.60ffd11c.chunk.js","sourcesContent":["/**\n * Creation Date: January 28, 2020\n * Author: Gillian Pierce\n * An SVG component for displaying the App Logo\n */\n\nimport React from \"react\";\n\nexport default () => (\n  <svg width=\"38px\" height=\"24px\" viewBox=\"0 0 332 209\" version=\"1.1\">\n    <g id=\"Logo\" stroke=\"none\" strokeWidth=\"1\" fill=\"none\" fillRule=\"evenodd\">\n      <g\n        id=\"ThickOutline\"\n        transform=\"translate(-61.000000, -120.000000)\"\n        stroke=\"#FFFFFF\"\n        strokeWidth=\"7\"\n      >\n        <path\n          d=\"M183.248175,124 C216.501352,124 243.925608,148.953853 247.812738,181.15528 C256.777656,172.834057 268.787398,167.747059 281.985401,167.747059 C309.740734,167.747059 332.240876,190.24475 332.240876,217.997059 C332.240876,218.233504 332.239243,218.469569 332.235987,218.705241 C333.409772,218.627548 334.594455,218.588235 335.788321,218.588235 C365.17632,218.588235 389,242.40932 389,271.794118 C389,300.885067 365.650411,324.523022 336.668274,324.992872 L335.788321,325 L335.788321,325 L124.124088,325 C91.4707557,325 65,298.532128 65,265.882353 C65,234.38546 89.634366,208.641604 120.689085,206.862816 C119.075215,201.197572 118.211679,195.214326 118.211679,189.029412 C118.211679,153.114659 147.32951,124 183.248175,124 Z M232.541169,246.02795 C222.605576,245.062811 212.28022,247.506222 203.451546,253.688127 C195.361374,259.352926 189.791261,267.272371 187.000285,275.996628 C184.208227,267.272977 178.637997,259.353143 170.547516,253.688127 C161.608801,247.429171 151.135864,245.002482 141.086567,246.065627 L141.086567,246.065627 L141.177148,246.428895 C143.668386,256.095396 149.495922,264.96236 158.324596,271.144265 C167.028778,277.238998 177.187728,279.699929 186.993783,278.842221 C196.803327,279.701867 206.966854,277.2414 215.674465,271.144265 C224.61318,264.885309 230.475477,255.873944 232.91351,246.067077 L232.91351,246.067077 Z M187.000416,205.000078 L186.754799,205.282639 C180.265381,212.86782 176.344526,222.727339 176.344526,233.50516 C176.344526,244.417525 180.363883,254.388518 187.000034,262.010682 C193.635179,254.388518 197.654536,244.417525 197.654536,233.50516 C197.654536,222.593005 193.635333,212.622185 187.000416,205.000078 L187.000416,205.000078 Z M186.5,278.589744 L186.5,323.410256\"\n          id=\"Combined-Shape\"\n        ></path>\n      </g>\n    </g>\n  </svg>\n);\n","/**\n * Creation Date: January 30, 2020\n * Author: Gillian Pierce\n * A component for the top page header including menu icon, logo and title\n */\n\nimport React from \"react\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport { IconButton } from \"@material-ui/core\";\nimport \"../Header.css\";\nimport Logo from \"./Logo\";\ninterface HeaderProps {\n  onMenuClick: Function;\n}\nclass Header extends React.Component<HeaderProps> {\n  render() {\n    return (\n      <div className=\"navigation\">\n        <div className=\"item\">\n          <IconButton onClick={() => this.props.onMenuClick(true)}>\n            <MenuIcon htmlColor=\"white\" />\n          </IconButton>\n        </div>\n        <div className=\"item logo\">\n          <Logo />\n        </div>\n        <div className=\"item\">\n          <h1 className=\"app-name\">CloudGarden</h1>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","/**\n * Creation Date: January 26, 2020\n * Author: Gillian Pierce\n * Renders the direct app routes and side navigation\n */\nimport React, { lazy, Suspense, useState, Fragment } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  NavLink,\n  Redirect\n} from \"react-router-dom\";\nimport {\n  Drawer,\n  List,\n  ListItem,\n  ListItemIcon,\n  ListItemText\n} from \"@material-ui/core\";\nimport BarChartIcon from \"@material-ui/icons/BarChart\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport TuneIcon from \"@material-ui/icons/Tune\";\nimport \"./Header.css\";\nimport \"./Dashboard.css\";\nimport Header from \"./components/Header\";\n\nconst Home = lazy(() => import(\"./Home\"));\nconst ControlView = lazy(() =>\n  import(\"./components/control/TestControlDashboard\")\n);\ninterface NavListItemProps {\n  text: string;\n  icon: JSX.Element;\n  to: string;\n}\nconst NavListItem = ({ text, icon, to }: NavListItemProps) => {\n  return (\n    <ListItem\n      button\n      component={NavLink}\n      to={to}\n      activeClassName=\"active-button\"\n    >\n      <ListItemIcon>{icon}</ListItemIcon>\n      <ListItemText primary={text} />\n    </ListItem>\n  );\n};\n\nconst App: React.FC = () => {\n  const [open, setOpen] = useState(false);\n  return (\n    <Fragment>\n      <Header onMenuClick={setOpen} />\n      <Router>\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route path=\"/dashboard\">\n              <Home />\n            </Route>\n            <Route exact path=\"/\">\n              <Redirect to=\"/dashboard\" />\n            </Route>\n            <Route path=\"/controls\">\n              <ControlView />\n            </Route>\n          </Switch>\n        </Suspense>\n        <Drawer open={open} onClose={() => setOpen(false)}>\n          <List>\n            <NavListItem\n              to=\"/dashboard/moisture\"\n              icon={<BarChartIcon />}\n              text=\"Dashboard\"\n            />\n            <NavListItem to=\"/controls\" icon={<TuneIcon />} text=\"Controls\" />\n            <NavListItem\n              to=\"/notifications\"\n              icon={<NotificationsIcon />}\n              text=\"Notifications\"\n            />\n          </List>\n        </Drawer>\n      </Router>\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/**\n * Creation Date: January 26, 2020\n * Author: create-react-app\n * Auto generated component that renders the entire application\n */\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}