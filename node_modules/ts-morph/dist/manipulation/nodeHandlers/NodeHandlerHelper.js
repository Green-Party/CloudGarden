"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../compiler/ast/utils");
const typescript_1 = require("../../typescript");
const utils_2 = require("../../utils");
class NodeHandlerHelper {
    constructor(compilerFactory) {
        this.compilerFactory = compilerFactory;
    }
    handleForValues(handler, currentNode, newNode, newSourceFile) {
        if (this.compilerFactory.hasCompilerNode(currentNode))
            handler.handleNode(this.compilerFactory.getExistingCompilerNode(currentNode), newNode, newSourceFile);
        else if (currentNode.kind === typescript_1.SyntaxKind.SyntaxList) {
            // always handle syntax lists because their children might be in the cache
            // todo: pass this in for performance reasons
            const sourceFile = this.compilerFactory.getExistingCompilerNode(currentNode.getSourceFile());
            handler.handleNode(this.compilerFactory.getNodeFromCompilerNode(currentNode, sourceFile), newNode, newSourceFile);
        }
    }
    forgetNodeIfNecessary(currentNode) {
        if (this.compilerFactory.hasCompilerNode(currentNode))
            this.compilerFactory.getExistingCompilerNode(currentNode).forget();
    }
    getCompilerChildrenAsIterators(currentNode, newNode, newSourceFile) {
        const children = this.getCompilerChildren(currentNode, newNode, newSourceFile);
        return [
            new utils_2.AdvancedIterator(utils_2.ArrayUtils.toIterator(children[0])),
            new utils_2.AdvancedIterator(utils_2.ArrayUtils.toIterator(children[1]))
        ];
    }
    getCompilerChildren(currentNode, newNode, newSourceFile) {
        const currentCompilerNode = currentNode.compilerNode;
        const currentSourceFile = currentNode._sourceFile.compilerNode;
        return [
            utils_1.ExtendedParser.getCompilerChildren(currentCompilerNode, currentSourceFile),
            utils_1.ExtendedParser.getCompilerChildren(newNode, newSourceFile)
        ];
    }
    /**
     * Gets the children of the node according to whether the tokens have previously been parsed.
     */
    getChildrenFast(currentNode, newNode, newSourceFile) {
        const currentCompilerNode = currentNode.compilerNode;
        const currentSourceFile = currentNode._sourceFile.compilerNode;
        if (utils_1.hasParsedTokens(currentCompilerNode)) {
            return [
                utils_1.ExtendedParser.getCompilerChildren(currentCompilerNode, currentSourceFile),
                utils_1.ExtendedParser.getCompilerChildren(newNode, newSourceFile)
            ];
        }
        // great, we don't have to parse the tokens and can instead just use ts.forEachChild (faster)
        return [
            utils_1.ExtendedParser.getCompilerForEachChildren(currentCompilerNode, currentSourceFile),
            utils_1.ExtendedParser.getCompilerForEachChildren(newNode, newSourceFile)
        ];
    }
}
exports.NodeHandlerHelper = NodeHandlerHelper;
