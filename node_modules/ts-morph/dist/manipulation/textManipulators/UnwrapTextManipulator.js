"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const InsertionTextManipulator_1 = require("./InsertionTextManipulator");
class UnwrapTextManipulator extends InsertionTextManipulator_1.InsertionTextManipulator {
    constructor(node) {
        super({
            insertPos: node.getPos(),
            newText: getReplacementText(node),
            replacingLength: node.getFullWidth()
        });
    }
}
exports.UnwrapTextManipulator = UnwrapTextManipulator;
function getReplacementText(node) {
    const childSyntaxList = node.getChildSyntaxListOrThrow();
    const indentationText = node.getIndentationText();
    const childIndentationText = node.getChildIndentationText();
    const indentationDifference = childIndentationText.replace(indentationText, "");
    const replaceRegex = new RegExp("^" + indentationDifference);
    const originalText = childSyntaxList.getFullText();
    const sourceFile = node._sourceFile;
    const lines = originalText.split("\n");
    let pos = childSyntaxList.getPos();
    const newLines = [];
    for (const line of lines) {
        if (sourceFile.isInStringAtPos(pos))
            newLines.push(line);
        else
            newLines.push(line.replace(replaceRegex, ""));
        pos += line.length + 1;
    }
    return newLines.join("\n").replace(/^\r?\n/, "");
}
