"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../errors");
const utils_1 = require("../utils");
/**
 * Contains common methods between Project and Directory.
 *
 * I'll definitely need to refactor this in the future... just putting these methods in a common place for now.
 */
class DirectoryCoordinator {
    constructor(compilerFactory, fileSystemWrapper) {
        this.compilerFactory = compilerFactory;
        this.fileSystemWrapper = fileSystemWrapper;
    }
    addExistingDirectoryIfExists(dirPath, options) {
        const directory = this.compilerFactory.getDirectoryFromPath(dirPath, options);
        if (directory == null)
            return undefined;
        if (options.recursive) {
            for (const descendantDirPath of utils_1.FileUtils.getDescendantDirectories(this.fileSystemWrapper, dirPath))
                this.compilerFactory.createDirectoryOrAddIfExists(descendantDirPath, options);
        }
        return directory;
    }
    addExistingDirectory(dirPath, options) {
        const directory = this.addExistingDirectoryIfExists(dirPath, options);
        if (directory == null)
            throw new errors.DirectoryNotFoundError(dirPath);
        return directory;
    }
    createDirectoryOrAddIfExists(dirPath, options) {
        return this.compilerFactory.createDirectoryOrAddIfExists(dirPath, options);
    }
    addExistingSourceFileIfExists(filePath, options) {
        return this.compilerFactory.addOrGetSourceFileFromFilePath(filePath, options);
    }
    addExistingSourceFile(filePath, options) {
        const sourceFile = this.addExistingSourceFileIfExists(filePath, options);
        if (sourceFile == null)
            throw new errors.FileNotFoundError(this.fileSystemWrapper.getStandardizedAbsolutePath(filePath));
        return sourceFile;
    }
    addExistingSourceFiles(fileGlobs, options) {
        if (typeof fileGlobs === "string")
            fileGlobs = [fileGlobs];
        const sourceFiles = [];
        const globbedDirectories = utils_1.FileUtils.getParentMostPaths(fileGlobs.filter(g => !utils_1.FileUtils.isNegatedGlob(g)).map(g => utils_1.FileUtils.getGlobDir(g)));
        for (const filePath of this.fileSystemWrapper.glob(fileGlobs)) {
            const sourceFile = this.addExistingSourceFileIfExists(filePath, options);
            if (sourceFile != null)
                sourceFiles.push(sourceFile);
        }
        for (const dirPath of globbedDirectories)
            this.addExistingDirectoryIfExists(dirPath, { recursive: true, markInProject: options.markInProject });
        return sourceFiles;
    }
}
exports.DirectoryCoordinator = DirectoryCoordinator;
