"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tsInternal = require("../../typescript/tsInternal");
const utils_1 = require("../../utils");
function readDirectory(fileSystemWrapper, useCaseSensitiveFileNames, rootDir, extensions, excludes, includes, depth) {
    const currentDir = fileSystemWrapper.getCurrentDirectory();
    const directories = [];
    // start: code from compiler api
    const regexFlag = useCaseSensitiveFileNames ? "" : "i";
    const patterns = tsInternal.getFileMatcherPatterns(rootDir, excludes || [], includes, useCaseSensitiveFileNames, currentDir);
    const includeDirectoryRegex = patterns.includeDirectoryPattern && new RegExp(patterns.includeDirectoryPattern, regexFlag);
    const excludeRegex = patterns.excludePattern && new RegExp(patterns.excludePattern, regexFlag);
    // end
    return {
        files: tsInternal.matchFiles(rootDir, extensions, excludes || [], includes, useCaseSensitiveFileNames, currentDir, undefined, path => {
            const includeDir = dirPathMatches(path);
            path = fileSystemWrapper.getStandardizedAbsolutePath(path);
            if (includeDir)
                directories.push(path);
            return getFileSystemEntries(path, fileSystemWrapper);
        }, path => fileSystemWrapper.realpathSync(path)),
        directories
    };
    function dirPathMatches(absoluteName) {
        // needed for the regex to match
        if (absoluteName[absoluteName.length - 1] !== "/")
            absoluteName += "/";
        // condition is from compiler api
        return (!includeDirectoryRegex || includeDirectoryRegex.test(absoluteName))
            && (!excludeRegex || !excludeRegex.test(absoluteName));
    }
}
exports.readDirectory = readDirectory;
function getFileSystemEntries(path, fileSystemWrapper) {
    const files = [];
    const directories = [];
    try {
        const entries = fileSystemWrapper.readDirSync(path);
        for (const entry of entries) {
            if (fileSystemWrapper.fileExistsSync(entry))
                files.push(entry);
            else
                directories.push(entry);
        }
    }
    catch (err) {
        if (!utils_1.FileUtils.isNotExistsError(err))
            throw err;
    }
    return { files, directories };
}
