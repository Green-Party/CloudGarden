"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const compiler_1 = require("../../compiler");
const typescript_1 = require("../../typescript");
const utils_1 = require("../../utils");
const getTsParseConfigHost_1 = require("./getTsParseConfigHost");
class TsConfigResolver {
    constructor(fileSystem, tsConfigFilePath, encoding) {
        this.fileSystem = fileSystem;
        this.encoding = encoding;
        this.host = getTsParseConfigHost_1.getTsParseConfigHost(fileSystem, { encoding });
        this.tsConfigFilePath = fileSystem.getStandardizedAbsolutePath(tsConfigFilePath);
        this.tsConfigDirPath = utils_1.FileUtils.getDirPath(this.tsConfigFilePath);
    }
    getCompilerOptions() {
        return this.parseJsonConfigFileContent().options;
    }
    getErrors() {
        return (this.parseJsonConfigFileContent().errors || []).map(e => new compiler_1.Diagnostic(undefined, e));
    }
    getPaths(compilerOptions) {
        const files = new Set();
        const { tsConfigDirPath, fileSystem } = this;
        const directories = new Set();
        compilerOptions = compilerOptions || this.getCompilerOptions();
        const rootDirs = getRootDirs(compilerOptions);
        const configFileContent = this.parseJsonConfigFileContent();
        for (let dirPath of configFileContent.directories) {
            dirPath = fileSystem.getStandardizedAbsolutePath(dirPath);
            if (dirInProject(dirPath) && fileSystem.directoryExistsSync(dirPath))
                directories.add(dirPath);
        }
        for (let filePath of configFileContent.fileNames) {
            filePath = fileSystem.getStandardizedAbsolutePath(filePath);
            const parentDirPath = utils_1.FileUtils.getDirPath(filePath);
            if (dirInProject(parentDirPath) && fileSystem.fileExistsSync(filePath)) {
                files.add(filePath);
                directories.add(parentDirPath);
            }
        }
        for (const rootDir of rootDirs)
            directories.add(rootDir);
        return {
            filePaths: Array.from(files.values()),
            directoryPaths: Array.from(directories.values())
        };
        function dirInProject(dirPath) {
            // fast check
            if (directories.has(dirPath))
                return true;
            // otherwise, check the strings
            if (rootDirs.length > 0)
                return rootDirs.some(rootDir => utils_1.FileUtils.pathStartsWith(dirPath, rootDir));
            return utils_1.FileUtils.pathStartsWith(dirPath, tsConfigDirPath);
        }
        function getRootDirs(options) {
            const result = [];
            if (typeof options.rootDir === "string")
                result.push(options.rootDir);
            if (options.rootDirs != null)
                result.push(...options.rootDirs);
            return result.map(rootDir => fileSystem.getStandardizedAbsolutePath(rootDir, tsConfigDirPath));
        }
    }
    parseJsonConfigFileContent() {
        this.host.clearDirectories();
        const result = typescript_1.ts.parseJsonConfigFileContent(this.getTsConfigFileJson(), this.host, this.tsConfigDirPath, undefined, this.tsConfigFilePath);
        delete result.options.configFilePath;
        return Object.assign({}, result, { directories: this.host.getDirectories() });
    }
    getTsConfigFileJson() {
        const text = this.fileSystem.readFileSync(this.tsConfigFilePath, this.encoding);
        const parseResult = typescript_1.ts.parseConfigFileTextToJson(this.tsConfigFilePath, text);
        if (parseResult.error != null)
            throw new Error(parseResult.error.messageText.toString());
        return parseResult.config;
    }
}
__decorate([
    utils_1.Memoize
], TsConfigResolver.prototype, "getCompilerOptions", null);
__decorate([
    utils_1.Memoize
], TsConfigResolver.prototype, "getErrors", null);
__decorate([
    utils_1.Memoize
], TsConfigResolver.prototype, "getPaths", null);
__decorate([
    utils_1.Memoize
], TsConfigResolver.prototype, "parseJsonConfigFileContent", null);
__decorate([
    utils_1.Memoize
], TsConfigResolver.prototype, "getTsConfigFileJson", null);
exports.TsConfigResolver = TsConfigResolver;
