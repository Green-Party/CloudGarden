"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../utils");
const StructureKind_1 = require("../StructureKind");
function forEachStructureChild(structure, callback) {
    // automatically generated: run `yarn run code-generate` to update the code in here
    if (utils_1.ArrayUtils.isReadonlyArray(structure)) {
        for (const item of structure) {
            const result = callback(item);
            if (result)
                return result;
        }
        return undefined;
    }
    switch (structure.kind) {
        case StructureKind_1.StructureKind.Class:
            return forClassDeclaration(structure, callback);
        case StructureKind_1.StructureKind.Constructor:
            return forConstructorDeclaration(structure, callback);
        case StructureKind_1.StructureKind.ConstructorOverload:
            return forConstructorDeclarationOverload(structure, callback);
        case StructureKind_1.StructureKind.GetAccessor:
            return forGetAccessorDeclaration(structure, callback);
        case StructureKind_1.StructureKind.Method:
            return forMethodDeclaration(structure, callback);
        case StructureKind_1.StructureKind.MethodOverload:
            return forMethodDeclarationOverload(structure, callback);
        case StructureKind_1.StructureKind.Property:
            return forPropertyDeclaration(structure, callback);
        case StructureKind_1.StructureKind.SetAccessor:
            return forSetAccessorDeclaration(structure, callback);
        case StructureKind_1.StructureKind.Enum:
            return forEnumDeclaration(structure, callback);
        case StructureKind_1.StructureKind.EnumMember:
            return forEnumMember(structure, callback);
        case StructureKind_1.StructureKind.Function:
            return forFunctionDeclaration(structure, callback);
        case StructureKind_1.StructureKind.FunctionOverload:
            return forFunctionDeclarationOverload(structure, callback);
        case StructureKind_1.StructureKind.Parameter:
            return forParameterDeclaration(structure, callback);
        case StructureKind_1.StructureKind.CallSignature:
            return forCallSignatureDeclaration(structure, callback);
        case StructureKind_1.StructureKind.ConstructSignature:
            return forConstructSignatureDeclaration(structure, callback);
        case StructureKind_1.StructureKind.IndexSignature:
            return forIndexSignatureDeclaration(structure, callback);
        case StructureKind_1.StructureKind.Interface:
            return forInterfaceDeclaration(structure, callback);
        case StructureKind_1.StructureKind.MethodSignature:
            return forMethodSignature(structure, callback);
        case StructureKind_1.StructureKind.PropertySignature:
            return forPropertySignature(structure, callback);
        case StructureKind_1.StructureKind.JsxElement:
            return forJsxElement(structure, callback);
        case StructureKind_1.StructureKind.JsxSelfClosingElement:
            return forJsxSelfClosingElement(structure, callback);
        case StructureKind_1.StructureKind.ExportDeclaration:
            return forExportDeclaration(structure, callback);
        case StructureKind_1.StructureKind.ImportDeclaration:
            return forImportDeclaration(structure, callback);
        case StructureKind_1.StructureKind.Namespace:
            return forNamespaceDeclaration(structure, callback);
        case StructureKind_1.StructureKind.SourceFile:
            return forSourceFile(structure, callback);
        case StructureKind_1.StructureKind.VariableStatement:
            return forVariableStatement(structure, callback);
        case StructureKind_1.StructureKind.TypeAlias:
            return forTypeAliasDeclaration(structure, callback);
        default:
            return undefined;
    }
}
exports.forEachStructureChild = forEachStructureChild;
/**
 * @generated
 */
function forClassDeclaration(structure, callback) {
    return forClassLikeDeclarationBase(structure, callback);
}
/**
 * @generated
 */
function forClassLikeDeclarationBase(structure, callback) {
    return forDecoratableNode(structure, callback)
        || forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback)
        || forAll(structure.ctors, callback, StructureKind_1.StructureKind.Constructor)
        || forAll(structure.properties, callback, StructureKind_1.StructureKind.Property)
        || forAll(structure.getAccessors, callback, StructureKind_1.StructureKind.GetAccessor)
        || forAll(structure.setAccessors, callback, StructureKind_1.StructureKind.SetAccessor)
        || forAll(structure.methods, callback, StructureKind_1.StructureKind.Method);
}
/**
 * @generated
 */
function forDecoratableNode(structure, callback) {
    return forAll(structure.decorators, callback, StructureKind_1.StructureKind.Decorator);
}
/**
 * @generated
 */
function forTypeParameteredNode(structure, callback) {
    return forAllIfStructure(structure.typeParameters, callback, StructureKind_1.StructureKind.TypeParameter);
}
/**
 * @generated
 */
function forJSDocableNode(structure, callback) {
    return forAllIfStructure(structure.docs, callback, StructureKind_1.StructureKind.JSDoc);
}
/**
 * @generated
 */
function forConstructorDeclaration(structure, callback) {
    return forFunctionLikeDeclaration(structure, callback)
        || forAll(structure.overloads, callback, StructureKind_1.StructureKind.ConstructorOverload);
}
/**
 * @generated
 */
function forFunctionLikeDeclaration(structure, callback) {
    return forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback)
        || forStatementedNode(structure, callback);
}
/**
 * @generated
 */
function forSignaturedDeclaration(structure, callback) {
    return forParameteredNode(structure, callback);
}
/**
 * @generated
 */
function forParameteredNode(structure, callback) {
    return forAll(structure.parameters, callback, StructureKind_1.StructureKind.Parameter);
}
/**
 * @generated
 */
function forStatementedNode(structure, callback) {
    return forAllUnknownKindIfStructure(structure.statements, callback);
}
/**
 * @generated
 */
function forConstructorDeclarationOverload(structure, callback) {
    return forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forGetAccessorDeclaration(structure, callback) {
    return forDecoratableNode(structure, callback)
        || forFunctionLikeDeclaration(structure, callback);
}
/**
 * @generated
 */
function forMethodDeclaration(structure, callback) {
    return forDecoratableNode(structure, callback)
        || forFunctionLikeDeclaration(structure, callback)
        || forAll(structure.overloads, callback, StructureKind_1.StructureKind.MethodOverload);
}
/**
 * @generated
 */
function forMethodDeclarationOverload(structure, callback) {
    return forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forPropertyDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forDecoratableNode(structure, callback);
}
/**
 * @generated
 */
function forSetAccessorDeclaration(structure, callback) {
    return forDecoratableNode(structure, callback)
        || forFunctionLikeDeclaration(structure, callback);
}
/**
 * @generated
 */
function forEnumDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forAll(structure.members, callback, StructureKind_1.StructureKind.EnumMember);
}
/**
 * @generated
 */
function forEnumMember(structure, callback) {
    return forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forFunctionDeclaration(structure, callback) {
    return forFunctionLikeDeclaration(structure, callback)
        || forAll(structure.overloads, callback, StructureKind_1.StructureKind.FunctionOverload);
}
/**
 * @generated
 */
function forFunctionDeclarationOverload(structure, callback) {
    return forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forParameterDeclaration(structure, callback) {
    return forDecoratableNode(structure, callback);
}
/**
 * @generated
 */
function forCallSignatureDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback);
}
/**
 * @generated
 */
function forConstructSignatureDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback);
}
/**
 * @generated
 */
function forIndexSignatureDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forInterfaceDeclaration(structure, callback) {
    return forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback)
        || forTypeElementMemberedNode(structure, callback);
}
/**
 * @generated
 */
function forTypeElementMemberedNode(structure, callback) {
    return forAll(structure.callSignatures, callback, StructureKind_1.StructureKind.CallSignature)
        || forAll(structure.constructSignatures, callback, StructureKind_1.StructureKind.ConstructSignature)
        || forAll(structure.indexSignatures, callback, StructureKind_1.StructureKind.IndexSignature)
        || forAll(structure.methods, callback, StructureKind_1.StructureKind.MethodSignature)
        || forAll(structure.properties, callback, StructureKind_1.StructureKind.PropertySignature);
}
/**
 * @generated
 */
function forMethodSignature(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forSignaturedDeclaration(structure, callback)
        || forTypeParameteredNode(structure, callback);
}
/**
 * @generated
 */
function forPropertySignature(structure, callback) {
    return forJSDocableNode(structure, callback);
}
/**
 * @generated
 */
function forJsxElement(structure, callback) {
    return forAllUnknownKindIfStructure(structure.attributes, callback)
        || forAllUnknownKindIfStructure(structure.children, callback);
}
/**
 * @generated
 */
function forJsxSelfClosingElement(structure, callback) {
    return forJsxAttributedNode(structure, callback);
}
/**
 * @generated
 */
function forJsxAttributedNode(structure, callback) {
    return forAllUnknownKindIfStructure(structure.attributes, callback);
}
/**
 * @generated
 */
function forExportDeclaration(structure, callback) {
    return forAllIfStructure(structure.namedExports, callback, StructureKind_1.StructureKind.ExportSpecifier);
}
/**
 * @generated
 */
function forImportDeclaration(structure, callback) {
    return forAllIfStructure(structure.namedImports, callback, StructureKind_1.StructureKind.ImportSpecifier);
}
/**
 * @generated
 */
function forNamespaceDeclaration(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forStatementedNode(structure, callback);
}
/**
 * @generated
 */
function forSourceFile(structure, callback) {
    return forStatementedNode(structure, callback);
}
/**
 * @generated
 */
function forVariableStatement(structure, callback) {
    return forJSDocableNode(structure, callback)
        || forAll(structure.declarations, callback, StructureKind_1.StructureKind.VariableDeclaration);
}
/**
 * @generated
 */
function forTypeAliasDeclaration(structure, callback) {
    return forTypeParameteredNode(structure, callback)
        || forJSDocableNode(structure, callback);
}
function forAll(structures, callback, kind) {
    if (structures == null)
        return;
    for (const structure of structures) {
        const result = callback(ensureKind(structure, kind)); // typescript can't figure this out, but this is ok
        if (result)
            return result;
    }
    return undefined;
}
function forAllIfStructure(values, callback, kind) {
    if (values == null || !(values instanceof Array))
        return;
    for (const value of values) {
        if (isStructure(value)) {
            const result = callback(ensureKind(value, kind));
            if (result)
                return result;
        }
    }
    return undefined;
}
function forAllUnknownKindIfStructure(values, callback) {
    if (values == null || !(values instanceof Array))
        return;
    for (const value of values) {
        if (isStructure(value)) {
            const result = callback(value);
            if (result)
                return result;
        }
    }
    return undefined;
}
function ensureKind(structure, kind) {
    if (structure.kind == null)
        structure.kind = kind;
    return structure;
}
function isStructure(value) {
    return value != null && typeof value.kind === "number";
}
