"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const compiler_1 = require("../../compiler");
const errors = require("../../errors");
const utils_1 = require("../../utils");
const NodePrinter_1 = require("../NodePrinter");
const formatting_1 = require("../formatting");
class NamespaceDeclarationStructurePrinter extends NodePrinter_1.NodePrinter {
    constructor(factory, options) {
        super(factory);
        this.options = options;
        this.blankLineFormattingWriter = new formatting_1.BlankLineFormattingStructuresPrinter(this);
    }
    printTexts(writer, structures) {
        this.blankLineFormattingWriter.printText(writer, structures);
    }
    printTextInternal(writer, structure) {
        structure = this.validateAndGetStructure(structure);
        this.factory.forJSDoc().printDocs(writer, structure.docs);
        this.factory.forModifierableNode().printText(writer, structure);
        if (structure.declarationKind == null || structure.declarationKind !== compiler_1.NamespaceDeclarationKind.Global)
            writer.write(`${structure.declarationKind || "namespace"} ${structure.name} `);
        else
            writer.write("global ");
        writer.inlineBlock(() => {
            this.factory.forStatementedNode({
                isAmbient: structure.hasDeclareKeyword || this.options.isAmbient
            }).printText(writer, structure);
        });
    }
    validateAndGetStructure(structure) {
        const name = structure.name.trim();
        if (!name.startsWith("'") && !name.startsWith(`"`))
            return structure;
        if (structure.declarationKind === compiler_1.NamespaceDeclarationKind.Namespace)
            throw new errors.InvalidOperationError(`Cannot print a namespace with quotes for namespace with name ${structure.name}. ` +
                `Use ${"NamespaceDeclarationKind.Module"} instead.`);
        structure = utils_1.ObjectUtils.clone(structure);
        utils_1.setValueIfUndefined(structure, "hasDeclareKeyword", true);
        utils_1.setValueIfUndefined(structure, "declarationKind", compiler_1.NamespaceDeclarationKind.Module);
        return structure;
    }
}
exports.NamespaceDeclarationStructurePrinter = NamespaceDeclarationStructurePrinter;
