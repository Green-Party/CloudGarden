"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const typescript_1 = require("../../../../typescript");
const callBaseSet_1 = require("../../callBaseSet");
const callBaseGetStructure_1 = require("../../callBaseGetStructure");
function AbstractableNode(Base) {
    return class extends Base {
        isAbstract() {
            return this.getAbstractKeyword() != null;
        }
        getAbstractKeyword() {
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.AbstractKeyword);
        }
        getAbstractKeywordOrThrow() {
            return errors.throwIfNullOrUndefined(this.getAbstractKeyword(), "Expected to find an abstract keyword.");
        }
        setIsAbstract(isAbstract) {
            this.toggleModifier("abstract", isAbstract);
            return this;
        }
        set(structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.isAbstract != null)
                this.setIsAbstract(structure.isAbstract);
            return this;
        }
        getStructure() {
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                isAbstract: this.isAbstract()
            });
        }
    };
}
exports.AbstractableNode = AbstractableNode;
