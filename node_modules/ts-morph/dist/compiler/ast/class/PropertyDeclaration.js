"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const structures_1 = require("../../../structures");
const typescript_1 = require("../../../typescript");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const base_2 = require("./base");
const ClassElement_1 = require("./ClassElement");
exports.PropertyDeclarationBase = base_1.ChildOrderableNode(base_1.DecoratableNode(base_2.AbstractableNode(base_1.ScopedNode(base_1.StaticableNode(base_1.JSDocableNode(base_1.ReadonlyableNode(base_1.ExclamationTokenableNode(base_1.QuestionTokenableNode(base_1.InitializerExpressionableNode(base_1.TypedNode(base_1.PropertyNamedNode(base_1.ModifierableNode(ClassElement_1.ClassElement)))))))))))));
class PropertyDeclaration extends exports.PropertyDeclarationBase {
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.PropertyDeclarationBase.prototype, this, structure);
        return this;
    }
    /**
     * Removes the property.
     */
    remove() {
        const parent = this.getParentOrThrow();
        switch (parent.getKind()) {
            case typescript_1.SyntaxKind.ClassDeclaration:
                super.remove();
                break;
            default:
                throw new errors.NotImplementedError(`Not implemented parent syntax kind: ${parent.getKindName()}`);
        }
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.PropertyDeclarationBase.prototype, this, {
            kind: structures_1.StructureKind.Property
        });
    }
}
exports.PropertyDeclaration = PropertyDeclaration;
