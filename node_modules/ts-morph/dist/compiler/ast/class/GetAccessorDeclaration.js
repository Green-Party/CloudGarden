"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const structures_1 = require("../../../structures");
const typescript_1 = require("../../../typescript");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const function_1 = require("../function");
const base_2 = require("./base");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const ClassElement_1 = require("./ClassElement");
exports.GetAccessorDeclarationBase = base_1.ChildOrderableNode(base_1.TextInsertableNode(base_1.DecoratableNode(base_2.AbstractableNode(base_1.ScopedNode(base_1.StaticableNode(function_1.FunctionLikeDeclaration(base_1.BodyableNode(base_1.PropertyNamedNode(ClassElement_1.ClassElement)))))))));
class GetAccessorDeclaration extends exports.GetAccessorDeclarationBase {
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.GetAccessorDeclarationBase.prototype, this, structure);
        return this;
    }
    /**
     * Gets the corresponding set accessor if one exists.
     */
    getSetAccessor() {
        const parent = this.getParentIfKindOrThrow(typescript_1.SyntaxKind.ClassDeclaration);
        const thisName = this.getName();
        for (const prop of parent.getInstanceProperties()) {
            if (prop.getName() === thisName && prop.getKind() === typescript_1.SyntaxKind.SetAccessor)
                return prop;
        }
        return undefined;
    }
    /**
     * Gets the corresponding set accessor or throws if not exists.
     */
    getSetAccessorOrThrow() {
        return errors.throwIfNullOrUndefined(this.getSetAccessor(), () => `Expected to find a corresponding set accessor for ${this.getName()}.`);
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.GetAccessorDeclarationBase.prototype, this, {
            kind: structures_1.StructureKind.GetAccessor
        });
    }
}
exports.GetAccessorDeclaration = GetAccessorDeclaration;
