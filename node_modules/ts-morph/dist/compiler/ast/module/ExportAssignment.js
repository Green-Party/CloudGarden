"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = require("../../../typescript");
const statement_1 = require("../statement");
const structures_1 = require("../../../structures");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const callBaseSet_1 = require("../callBaseSet");
exports.ExportAssignmentBase = statement_1.Statement;
class ExportAssignment extends exports.ExportAssignmentBase {
    /**
     * Gets if this is an export equals assignment.
     *
     * If this is false, then it's `export default`.
     */
    isExportEquals() {
        return this.compilerNode.isExportEquals || false;
    }
    /**
     * Sets if this is an export equals assignment or export default.
     * @param value - Whether it should be an export equals assignment.
     */
    setIsExportEquals(value) {
        if (this.isExportEquals() === value)
            return this;
        if (value)
            this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.DefaultKeyword).replaceWithText("=");
        else
            this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.EqualsToken).replaceWithText("default");
        return this;
    }
    /**
     * Gets the export assignment expression.
     */
    getExpression() {
        return this._getNodeFromCompilerNode(this.compilerNode.expression);
    }
    /**
     * Sets the expression of the export assignment.
     * @param textOrWriterFunction - Text or writer function to set as the export assignment expression.
     */
    setExpression(textOrWriterFunction) {
        this.getExpression().replaceWithText(textOrWriterFunction, this._getWriterWithQueuedChildIndentation());
        return this;
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.ExportAssignmentBase.prototype, this, structure);
        if (structure.expression != null)
            this.setExpression(structure.expression);
        if (structure.isExportEquals != null)
            this.setIsExportEquals(structure.isExportEquals);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(statement_1.Statement.prototype, this, {
            kind: structures_1.StructureKind.ExportAssignment,
            expression: this.getExpression().getText(),
            isExportEquals: this.isExportEquals()
        });
    }
}
exports.ExportAssignment = ExportAssignment;
