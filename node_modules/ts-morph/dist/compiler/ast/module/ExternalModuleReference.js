"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const utils_1 = require("../../../utils");
const common_1 = require("../common");
class ExternalModuleReference extends common_1.Node {
    /**
     * Gets the expression or undefined of the yield expression.
     */
    getExpression() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.expression);
    }
    /**
     * Gets the expression of the yield expression or throws if it does not exist.
     */
    getExpressionOrThrow() {
        return errors.throwIfNullOrUndefined(this.getExpression(), "Expected to find an expression.");
    }
    /**
     * Gets the source file referenced or throws if it can't find it.
     */
    getReferencedSourceFileOrThrow() {
        return errors.throwIfNullOrUndefined(this.getReferencedSourceFile(), "Expected to find the referenced source file.");
    }
    /**
     * Gets if the external module reference is relative.
     */
    isRelative() {
        const expression = this.getExpression();
        if (expression == null || !utils_1.TypeGuards.isStringLiteral(expression))
            return false;
        return utils_1.ModuleUtils.isModuleSpecifierRelative(expression.getLiteralText());
    }
    /**
     * Gets the source file referenced or returns undefined if it can't find it.
     */
    getReferencedSourceFile() {
        const expression = this.getExpression();
        if (expression == null)
            return undefined;
        const symbol = expression.getSymbol();
        if (symbol == null)
            return undefined;
        return utils_1.ModuleUtils.getReferencedSourceFileFromSymbol(symbol);
    }
}
exports.ExternalModuleReference = ExternalModuleReference;
