"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const structures_1 = require("../../../structures");
const utils_1 = require("../../../utils");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const module_1 = require("../module");
const statement_1 = require("../statement");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
exports.InterfaceDeclarationBase = base_1.TypeElementMemberedNode(base_1.TextInsertableNode(base_1.ExtendsClauseableNode(base_1.HeritageClauseableNode(base_1.TypeParameteredNode(base_1.JSDocableNode(base_1.AmbientableNode(module_1.NamespaceChildableNode(base_1.ExportableNode(base_1.ModifierableNode(base_1.NamedNode(statement_1.Statement)))))))))));
class InterfaceDeclaration extends exports.InterfaceDeclarationBase {
    /**
     * Gets the base types.
     */
    getBaseTypes() {
        return this.getType().getBaseTypes();
    }
    /**
     * Gets the base declarations.
     */
    getBaseDeclarations() {
        return utils_1.ArrayUtils.flatten(this.getType().getBaseTypes().map(t => {
            const symbol = t.getSymbol();
            return symbol == null ? [] : symbol.getDeclarations();
        }));
    }
    /**
     * Gets all the implementations of the interface.
     *
     * This is similar to "go to implementation."
     */
    getImplementations() {
        return this.getNameNode().getImplementations();
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.InterfaceDeclarationBase.prototype, this, structure);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.InterfaceDeclarationBase.prototype, this, {
            kind: structures_1.StructureKind.Interface
        });
    }
}
exports.InterfaceDeclaration = InterfaceDeclaration;
