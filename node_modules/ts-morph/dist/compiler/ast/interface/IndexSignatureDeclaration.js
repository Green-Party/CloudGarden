"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const structures_1 = require("../../../structures");
const errors = require("../../../errors");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const TypeElement_1 = require("./TypeElement");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
exports.IndexSignatureDeclarationBase = base_1.ReturnTypedNode(base_1.ChildOrderableNode(base_1.JSDocableNode(base_1.ReadonlyableNode(base_1.ModifierableNode(TypeElement_1.TypeElement)))));
class IndexSignatureDeclaration extends exports.IndexSignatureDeclarationBase {
    /**
     * Gets the key name.
     */
    getKeyName() {
        return this.getKeyNameNode().getText();
    }
    /**
     * Sets the key name.
     * @param name - New name.
     */
    setKeyName(name) {
        errors.throwIfWhitespaceOrNotString(name, "name");
        if (this.getKeyName() === name)
            return;
        this.getKeyNameNode().replaceWithText(name, this._getWriterWithQueuedChildIndentation());
    }
    /**
     * Gets the key name node.
     */
    getKeyNameNode() {
        const param = this.compilerNode.parameters[0];
        return this._getNodeFromCompilerNode(param.name);
    }
    /**
     * Gets the key type.
     */
    getKeyType() {
        return this.getKeyNameNode().getType();
    }
    /**
     * Sets the key type.
     * @param type - Type.
     */
    setKeyType(type) {
        errors.throwIfWhitespaceOrNotString(type, "type");
        const keyTypeNode = this.getKeyTypeNode();
        if (keyTypeNode.getText() === type)
            return this;
        keyTypeNode.replaceWithText(type, this._getWriterWithQueuedChildIndentation());
        return this;
    }
    /**
     * Gets the key type node.
     */
    getKeyTypeNode() {
        // this node must exist for it to be an index signature (otherwise it's a property signature)
        const param = this.compilerNode.parameters[0];
        return this._getNodeFromCompilerNode(param.type);
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.IndexSignatureDeclarationBase.prototype, this, structure);
        if (structure.keyName != null)
            this.setKeyName(structure.keyName);
        if (structure.keyType != null)
            this.setKeyType(structure.keyType);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        const keyTypeNode = this.getKeyTypeNode();
        return callBaseGetStructure_1.callBaseGetStructure(exports.IndexSignatureDeclarationBase.prototype, this, {
            kind: structures_1.StructureKind.IndexSignature,
            keyName: this.getKeyName(),
            keyType: keyTypeNode.getText()
        });
    }
}
exports.IndexSignatureDeclaration = IndexSignatureDeclaration;
