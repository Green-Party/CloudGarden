"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../manipulation");
const structures_1 = require("../../../structures");
const callBaseSet_1 = require("../callBaseSet");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const common_1 = require("../common");
exports.JsxSpreadAttributeBase = common_1.Node;
class JsxSpreadAttribute extends exports.JsxSpreadAttributeBase {
    /**
     * Gets the JSX spread attribute's expression.
     */
    getExpression() {
        return this._getNodeFromCompilerNode(this.compilerNode.expression);
    }
    /**
     * Sets the expression.
     * @param textOrWriterFunction - Text to set the expression with.
     */
    setExpression(textOrWriterFunction) {
        this.getExpression().replaceWithText(textOrWriterFunction);
        return this;
    }
    /**
     * Removes the JSX spread attribute.
     */
    remove() {
        manipulation_1.removeChildren({
            children: [this],
            removePrecedingNewLines: true,
            removePrecedingSpaces: true
        });
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.JsxSpreadAttributeBase.prototype, this, structure);
        if (structure.expression != null)
            this.setExpression(structure.expression);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.JsxSpreadAttributeBase.prototype, this, {
            kind: structures_1.StructureKind.JsxSpreadAttribute,
            expression: this.getExpression().getText()
        });
    }
}
exports.JsxSpreadAttribute = JsxSpreadAttribute;
