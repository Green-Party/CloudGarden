"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const manipulation_1 = require("../../../../manipulation");
const structurePrinters_1 = require("../../../../structurePrinters");
const typescript_1 = require("../../../../typescript");
const utils_1 = require("../../../../utils");
const callBaseSet_1 = require("../../callBaseSet");
const callBaseGetStructure_1 = require("../../callBaseGetStructure");
function JsxAttributedNode(Base) {
    return class extends Base {
        getAttributes() {
            return this.compilerNode.attributes.properties.map(p => this._getNodeFromCompilerNode(p));
        }
        getAttributeOrThrow(nameOrFindFunction) {
            return errors.throwIfNullOrUndefined(this.getAttribute(nameOrFindFunction), () => utils_1.getNotFoundErrorMessageForNameOrFindFunction("attribute", nameOrFindFunction));
        }
        getAttribute(nameOrFindFunction) {
            return utils_1.getNodeByNameOrFindFunction(this.getAttributes(), nameOrFindFunction);
        }
        addAttribute(structure) {
            return this.addAttributes([structure])[0];
        }
        addAttributes(structures) {
            return this.insertAttributes(this.compilerNode.attributes.properties.length, structures);
        }
        insertAttribute(index, structure) {
            return this.insertAttributes(index, [structure])[0];
        }
        insertAttributes(index, structures) {
            if (structures.length === 0)
                return [];
            index = manipulation_1.verifyAndGetIndex(index, this.compilerNode.attributes.properties.length);
            const insertPos = index === 0 ? this.getTagNameNode().getEnd() : this.getAttributes()[index - 1].getEnd();
            const writer = this._getWriterWithQueuedChildIndentation();
            const structuresPrinter = new structurePrinters_1.SpaceFormattingStructuresPrinter(this._context.structurePrinterFactory.forJsxAttributeDecider());
            structuresPrinter.printText(writer, structures);
            manipulation_1.insertIntoParentTextRange({
                insertPos,
                newText: " " + writer.toString(),
                parent: this.getNodeProperty("attributes").getFirstChildByKindOrThrow(typescript_1.SyntaxKind.SyntaxList)
            });
            return manipulation_1.getNodesToReturn(this.getAttributes(), index, structures.length);
        }
        set(structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.attributes != null) {
                this.getAttributes().forEach(a => a.remove());
                this.addAttributes(structure.attributes);
            }
            return this;
        }
        getStructure() {
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                attributes: this.getAttributes().map(a => a.getStructure())
            });
        }
    };
}
exports.JsxAttributedNode = JsxAttributedNode;
