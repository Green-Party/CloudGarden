"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const manipulation_1 = require("../../../manipulation");
const structures_1 = require("../../../structures");
const typescript_1 = require("../../../typescript");
const utils_1 = require("../../../utils");
const base_1 = require("../base");
const common_1 = require("../common");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const callBaseSet_1 = require("../callBaseSet");
exports.JsxAttributeBase = base_1.NamedNode(common_1.Node);
class JsxAttribute extends exports.JsxAttributeBase {
    /**
     * Gets the JSX attribute's initializer or throws if it doesn't exist.
     */
    getInitializerOrThrow() {
        return errors.throwIfNullOrUndefined(this.getInitializer(), `Expected to find an initializer for the JSX attribute '${this.getName()}'`);
    }
    /**
     * Gets the JSX attribute's initializer or returns undefined if it doesn't exist.
     */
    getInitializer() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);
    }
    /**
     * Sets the initializer.
     * @param textOrWriterFunction - Text or writer function to set the initializer with.
     * @remarks You need to provide the quotes or braces.
     */
    setInitializer(textOrWriterFunction) {
        const text = utils_1.getTextFromStringOrWriter(this._getWriterWithQueuedIndentation(), textOrWriterFunction);
        if (utils_1.StringUtils.isNullOrWhitespace(text)) {
            this.removeInitializer();
            return this;
        }
        const initializer = this.getInitializer();
        if (initializer != null) {
            initializer.replaceWithText(text);
            return this;
        }
        manipulation_1.insertIntoParentTextRange({
            insertPos: this.getNameNode().getEnd(),
            parent: this,
            newText: `=${text}`
        });
        return this;
    }
    /**
     * Removes the initializer.
     */
    removeInitializer() {
        const initializer = this.getInitializer();
        if (initializer == null)
            return this;
        manipulation_1.removeChildren({
            children: [initializer.getPreviousSiblingIfKindOrThrow(typescript_1.SyntaxKind.EqualsToken), initializer],
            removePrecedingSpaces: true,
            removePrecedingNewLines: true
        });
        return this;
    }
    /**
     * Removes the JSX attribute.
     */
    remove() {
        manipulation_1.removeChildren({
            children: [this],
            removePrecedingNewLines: true,
            removePrecedingSpaces: true
        });
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.JsxAttributeBase.prototype, this, structure);
        if (structure.initializer != null)
            this.setInitializer(structure.initializer);
        else if (structure.hasOwnProperty("initializer"))
            this.removeInitializer();
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        const initializer = this.getInitializer();
        return callBaseGetStructure_1.callBaseGetStructure(exports.JsxAttributeBase.prototype, this, {
            kind: structures_1.StructureKind.JsxAttribute,
            initializer: initializer == null ? undefined : initializer.getText()
        });
    }
}
exports.JsxAttribute = JsxAttribute;
