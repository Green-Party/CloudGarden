"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../../manipulation");
const expression_1 = require("../../expression");
exports.NoSubstitutionTemplateLiteralBase = expression_1.LiteralExpression;
class NoSubstitutionTemplateLiteral extends exports.NoSubstitutionTemplateLiteralBase {
    /**
     * Gets the literal value.
     */
    getLiteralValue() {
        // for consistency with other literals
        return this.compilerNode.text;
    }
    /**
     * Sets the literal value.
     *
     * Note: This could possibly replace the node if you add a tagged template.
     * @param value - Value to set.
     * @returns The new node if the kind changed; the current node otherwise.
     */
    setLiteralValue(value) {
        const childIndex = this.getChildIndex();
        const parent = this.getParentSyntaxList() || this.getParentOrThrow();
        manipulation_1.replaceNodeText({
            sourceFile: this._sourceFile,
            start: this.getStart() + 1,
            replacingLength: this.getWidth() - 2,
            newText: value
        });
        return parent.getChildAtIndex(childIndex);
    }
}
exports.NoSubstitutionTemplateLiteral = NoSubstitutionTemplateLiteral;
