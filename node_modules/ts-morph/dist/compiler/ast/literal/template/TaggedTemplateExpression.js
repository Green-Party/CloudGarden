"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../../manipulation");
const expression_1 = require("../../expression");
class TaggedTemplateExpression extends expression_1.MemberExpression {
    /**
     * Gets the tag.
     */
    getTag() {
        return this._getNodeFromCompilerNode(this.compilerNode.tag);
    }
    /**
     * Gets the template literal.
     */
    getTemplate() {
        return this._getNodeFromCompilerNode(this.compilerNode.template);
    }
    /**
     * Removes the tag from the tagged template.
     * @returns The new template expression.
     */
    removeTag() {
        const parent = this.getParentSyntaxList() || this.getParentOrThrow();
        const index = this.getChildIndex();
        const template = this.getTemplate();
        manipulation_1.insertIntoParentTextRange({
            // @code-fence-allow(getChildren): This seems a little suspect, but shouldn't cause any issues...
            customMappings: (newParent, newSourceFile) => [{ currentNode: template, newNode: newParent.getChildren(newSourceFile)[index] }],
            parent,
            insertPos: this.getStart(),
            newText: this.getTemplate().getText(),
            replacing: {
                textLength: this.getWidth(),
                nodes: [this]
            }
        });
        return parent.getChildAtIndex(index);
    }
}
exports.TaggedTemplateExpression = TaggedTemplateExpression;
