"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const utils_1 = require("../../../../utils");
function RenameableNode(Base) {
    return class extends Base {
        rename(newName, options) {
            this._context.languageService.renameNode(getNodeToRename(this), newName, options);
            return this;
            function getNodeToRename(thisNode) {
                if (utils_1.TypeGuards.isIdentifier(thisNode))
                    return thisNode;
                else if (thisNode.getNameNode != null) {
                    const node = thisNode.getNameNode();
                    errors.throwIfNullOrUndefined(node, "Expected to find a name node when renaming.");
                    if (utils_1.TypeGuards.isArrayBindingPattern(node) || utils_1.TypeGuards.isObjectBindingPattern(node))
                        throw new errors.NotImplementedError(`Not implemented renameable scenario for ${node.getKindName()}.`);
                    return node;
                }
                else
                    throw new errors.NotImplementedError(`Not implemented renameable scenario for ${thisNode.getKindName()}`);
            }
        }
    };
}
exports.RenameableNode = RenameableNode;
