"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const typescript_1 = require("../../../typescript");
const callBaseSet_1 = require("../callBaseSet");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
function ReadonlyableNode(Base) {
    return class extends Base {
        isReadonly() {
            return this.getReadonlyKeyword() != null;
        }
        getReadonlyKeyword() {
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.ReadonlyKeyword);
        }
        getReadonlyKeywordOrThrow() {
            return errors.throwIfNullOrUndefined(this.getReadonlyKeyword(), "Expected to find a readonly keyword.");
        }
        setIsReadonly(value) {
            this.toggleModifier("readonly", value);
            return this;
        }
        set(structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.isReadonly != null)
                this.setIsReadonly(structure.isReadonly);
            return this;
        }
        getStructure() {
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                isReadonly: this.isReadonly()
            });
        }
    };
}
exports.ReadonlyableNode = ReadonlyableNode;
