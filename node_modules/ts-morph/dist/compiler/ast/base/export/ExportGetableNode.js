"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const typescript_1 = require("../../../../typescript");
const utils_1 = require("../../../../utils");
const ModifierableNode_1 = require("../ModifierableNode");
function ExportGetableNode(Base) {
    return class extends Base {
        hasExportKeyword() {
            return this.getExportKeyword() != null;
        }
        getExportKeyword() {
            if (utils_1.TypeGuards.isVariableDeclaration(this)) {
                const variableStatement = this.getVariableStatement();
                return variableStatement == null ? undefined : variableStatement.getExportKeyword();
            }
            if (!utils_1.TypeGuards.isModifierableNode(this))
                return throwForNotModifierableNode();
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.ExportKeyword);
        }
        getExportKeywordOrThrow() {
            return errors.throwIfNullOrUndefined(this.getExportKeyword(), "Expected to find an export keyword.");
        }
        hasDefaultKeyword() {
            return this.getDefaultKeyword() != null;
        }
        getDefaultKeyword() {
            if (utils_1.TypeGuards.isVariableDeclaration(this)) {
                const variableStatement = this.getVariableStatement();
                return variableStatement == null ? undefined : variableStatement.getDefaultKeyword();
            }
            if (!utils_1.TypeGuards.isModifierableNode(this))
                return throwForNotModifierableNode();
            return this.getFirstModifierByKind(typescript_1.SyntaxKind.DefaultKeyword);
        }
        getDefaultKeywordOrThrow() {
            return errors.throwIfNullOrUndefined(this.getDefaultKeyword(), "Expected to find a default keyword.");
        }
        isExported() {
            if (this.hasExportKeyword())
                return true;
            const thisSymbol = this.getSymbol();
            const sourceFileSymbol = this.getSourceFile().getSymbol();
            if (thisSymbol == null || sourceFileSymbol == null)
                return false;
            return sourceFileSymbol.getExports().some(e => e === thisSymbol || e.getAliasedSymbol() === thisSymbol);
        }
        isDefaultExport() {
            if (this.hasDefaultKeyword())
                return true;
            const thisSymbol = this.getSymbol();
            if (thisSymbol == null)
                return false;
            const defaultExportSymbol = this.getSourceFile().getDefaultExportSymbol();
            if (defaultExportSymbol == null)
                return false;
            if (thisSymbol === defaultExportSymbol)
                return true;
            const aliasedSymbol = defaultExportSymbol.getAliasedSymbol();
            return thisSymbol === aliasedSymbol;
        }
        isNamedExport() {
            const thisSymbol = this.getSymbol();
            const sourceFileSymbol = this.getSourceFile().getSymbol();
            if (thisSymbol == null || sourceFileSymbol == null)
                return false;
            return !isDefaultExport() && sourceFileSymbol.getExports().some(e => e === thisSymbol || e.getAliasedSymbol() === thisSymbol);
            function isDefaultExport() {
                const defaultExportSymbol = sourceFileSymbol.getExport("default");
                if (defaultExportSymbol == null)
                    return false;
                return thisSymbol === defaultExportSymbol || thisSymbol === defaultExportSymbol.getAliasedSymbol();
            }
        }
    };
}
exports.ExportGetableNode = ExportGetableNode;
function throwForNotModifierableNode() {
    throw new errors.NotImplementedError(`Not implemented situation where node was not a ${"ModifierableNode"}.`);
}
