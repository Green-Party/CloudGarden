"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = require("../../../typescript");
const utils_1 = require("../../../utils");
const callBaseSet_1 = require("../callBaseSet");
const Scope_1 = require("../common/Scope");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
function ScopeableNode(Base) {
    return class extends Base {
        getScope() {
            const scope = getScopeForNode(this);
            if (scope != null)
                return scope;
            if (utils_1.TypeGuards.isParameterDeclaration(this) && this.isReadonly())
                return Scope_1.Scope.Public;
            return undefined;
        }
        setScope(scope) {
            setScopeForNode(this, scope);
            return this;
        }
        // todo: make public
        getScopeKeyword() {
            return this.getModifiers().find(m => {
                const text = m.getText();
                return text === "public" || text === "protected" || text === "private";
            });
        }
        hasScopeKeyword() {
            return this.getScopeKeyword() != null;
        }
        set(structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.hasOwnProperty("scope"))
                this.setScope(structure.scope);
            return this;
        }
        getStructure() {
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                scope: this.getScope()
            });
        }
    };
}
exports.ScopeableNode = ScopeableNode;
/**
 * Gets the scope for a node.
 * @internal
 * @param node - Node to check for.
 */
function getScopeForNode(node) {
    const modifierFlags = node.getCombinedModifierFlags();
    if ((modifierFlags & typescript_1.ts.ModifierFlags.Private) !== 0)
        return Scope_1.Scope.Private;
    else if ((modifierFlags & typescript_1.ts.ModifierFlags.Protected) !== 0)
        return Scope_1.Scope.Protected;
    else if ((modifierFlags & typescript_1.ts.ModifierFlags.Public) !== 0)
        return Scope_1.Scope.Public;
    else
        return undefined;
}
exports.getScopeForNode = getScopeForNode;
/**
 * Sets the scope for a node.
 * @internal
 * @param node - Node to set the scope for.
 * @param scope - Scope to be set to.
 */
function setScopeForNode(node, scope) {
    node.toggleModifier("public", scope === Scope_1.Scope.Public); // always be explicit with scope
    node.toggleModifier("protected", scope === Scope_1.Scope.Protected);
    node.toggleModifier("private", scope === Scope_1.Scope.Private);
}
exports.setScopeForNode = setScopeForNode;
