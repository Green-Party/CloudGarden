"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const manipulation_1 = require("../../../../manipulation");
const typescript_1 = require("../../../../typescript");
const utils_1 = require("../../../../utils");
const callBaseSet_1 = require("../../callBaseSet");
const InitializerExpressionGetableNode_1 = require("./InitializerExpressionGetableNode");
const callBaseGetStructure_1 = require("../../callBaseGetStructure");
function InitializerExpressionableNode(Base) {
    return apply(InitializerExpressionGetableNode_1.InitializerExpressionGetableNode(Base));
}
exports.InitializerExpressionableNode = InitializerExpressionableNode;
function apply(Base) {
    return class extends Base {
        removeInitializer() {
            const initializer = this.getInitializer();
            if (initializer == null)
                return this;
            const previousSibling = initializer.getPreviousSiblingIfKindOrThrow(typescript_1.SyntaxKind.EqualsToken);
            manipulation_1.removeChildren({
                children: [previousSibling, initializer],
                removePrecedingSpaces: true
            });
            return this;
        }
        setInitializer(textOrWriterFunction) {
            const text = utils_1.getTextFromStringOrWriter(this._getWriterWithQueuedChildIndentation(), textOrWriterFunction);
            errors.throwIfWhitespaceOrNotString(text, "textOrWriterFunction");
            if (this.hasInitializer())
                this.removeInitializer();
            const semiColonToken = this.getLastChildIfKind(typescript_1.SyntaxKind.SemicolonToken);
            manipulation_1.insertIntoParentTextRange({
                insertPos: semiColonToken != null ? semiColonToken.getPos() : this.getEnd(),
                parent: this,
                newText: ` = ${text}`
            });
            return this;
        }
        set(structure) {
            callBaseSet_1.callBaseSet(Base.prototype, this, structure);
            if (structure.initializer != null)
                this.setInitializer(structure.initializer);
            else if (structure.hasOwnProperty("initializer"))
                this.removeInitializer();
            return this;
        }
        getStructure() {
            const initializer = this.getInitializer();
            return callBaseGetStructure_1.callBaseGetStructure(Base.prototype, this, {
                initializer: initializer ? initializer.getText() : undefined
            });
        }
    };
}
