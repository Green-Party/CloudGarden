"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../manipulation");
const structures_1 = require("../../../structures");
const typescript_1 = require("../../../typescript");
const utils_1 = require("../../../utils");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const common_1 = require("../common");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
exports.EnumMemberBase = base_1.JSDocableNode(base_1.InitializerExpressionableNode(base_1.PropertyNamedNode(common_1.Node)));
class EnumMember extends exports.EnumMemberBase {
    /**
     * Gets the constant value of the enum.
     */
    getValue() {
        return this._context.typeChecker.getConstantValue(this);
    }
    /**
     * Sets the enum value.
     * @param value - Enum value.
     */
    setValue(value) {
        let text;
        if (typeof value === "string") {
            const quoteKind = this._context.manipulationSettings.getQuoteKind();
            text = quoteKind + utils_1.StringUtils.escapeForWithinString(value, quoteKind) + quoteKind;
        }
        else {
            text = value.toString();
        }
        this.setInitializer(text);
        return this;
    }
    /**
     * Removes this enum member.
     */
    remove() {
        const childrenToRemove = [this];
        const commaToken = this.getNextSiblingIfKind(typescript_1.SyntaxKind.CommaToken);
        if (commaToken != null)
            childrenToRemove.push(commaToken);
        manipulation_1.removeChildrenWithFormatting({
            children: childrenToRemove,
            getSiblingFormatting: () => manipulation_1.FormattingKind.Newline
        });
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.EnumMemberBase.prototype, this, structure);
        if (structure.value != null)
            this.setValue(structure.value);
        else if (structure.hasOwnProperty("value") && structure.initializer == null)
            this.removeInitializer();
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.EnumMemberBase.prototype, this, {
            kind: structures_1.StructureKind.EnumMember,
            // never return the value, only return the initializer
            value: undefined
        });
    }
}
exports.EnumMember = EnumMember;
