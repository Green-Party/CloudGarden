"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const manipulation_1 = require("../../../manipulation");
const structurePrinters_1 = require("../../../structurePrinters");
const typescript_1 = require("../../../typescript");
const base_1 = require("../base");
const common_1 = require("../common");
const VariableDeclarationKind_1 = require("./VariableDeclarationKind");
exports.VariableDeclarationListBase = base_1.ModifierableNode(common_1.Node);
class VariableDeclarationList extends exports.VariableDeclarationListBase {
    /**
     * Get the variable declarations.
     */
    getDeclarations() {
        return this.compilerNode.declarations.map(d => this._getNodeFromCompilerNode(d));
    }
    /**
     * Gets the variable declaration kind.
     */
    getDeclarationKind() {
        const nodeFlags = this.compilerNode.flags;
        if (nodeFlags & typescript_1.ts.NodeFlags.Let)
            return VariableDeclarationKind_1.VariableDeclarationKind.Let;
        else if (nodeFlags & typescript_1.ts.NodeFlags.Const)
            return VariableDeclarationKind_1.VariableDeclarationKind.Const;
        else
            return VariableDeclarationKind_1.VariableDeclarationKind.Var;
    }
    /**
     * Gets the variable declaration kind keyword.
     */
    getDeclarationKindKeyword() {
        const declarationKind = this.getDeclarationKind();
        switch (declarationKind) {
            case VariableDeclarationKind_1.VariableDeclarationKind.Const:
                return this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.ConstKeyword);
            case VariableDeclarationKind_1.VariableDeclarationKind.Let:
                return this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.LetKeyword);
            case VariableDeclarationKind_1.VariableDeclarationKind.Var:
                return this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.VarKeyword);
            default:
                return errors.throwNotImplementedForNeverValueError(declarationKind);
        }
    }
    /**
     * Sets the variable declaration kind.
     * @param type - Type to set.
     */
    setDeclarationKind(type) {
        if (this.getDeclarationKind() === type)
            return this;
        const keyword = this.getDeclarationKindKeyword();
        manipulation_1.insertIntoParentTextRange({
            insertPos: keyword.getStart(),
            newText: type,
            parent: this,
            replacing: {
                textLength: keyword.getWidth()
            }
        });
        return this;
    }
    /**
     * Add a variable declaration to the statement.
     * @param structure - Structure representing the variable declaration to add.
     */
    addDeclaration(structure) {
        return this.addDeclarations([structure])[0];
    }
    /**
     * Adds variable declarations to the statement.
     * @param structures - Structures representing the variable declarations to add.
     */
    addDeclarations(structures) {
        return this.insertDeclarations(this.getDeclarations().length, structures);
    }
    /**
     * Inserts a variable declaration at the specified index within the statement.
     * @param index - Child index to insert at.
     * @param structure - Structure representing the variable declaration to insert.
     */
    insertDeclaration(index, structure) {
        return this.insertDeclarations(index, [structure])[0];
    }
    /**
     * Inserts variable declarations at the specified index within the statement.
     * @param index - Child index to insert at.
     * @param structures - Structures representing the variable declarations to insert.
     */
    insertDeclarations(index, structures) {
        const writer = this._getWriterWithQueuedChildIndentation();
        const structurePrinter = new structurePrinters_1.CommaSeparatedStructuresPrinter(this._context.structurePrinterFactory.forVariableDeclaration());
        structurePrinter.printText(writer, structures);
        manipulation_1.insertIntoCommaSeparatedNodes({
            parent: this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.SyntaxList),
            currentNodes: this.getDeclarations(),
            insertIndex: index,
            newText: writer.toString()
        });
        return manipulation_1.getNodesToReturn(this.getDeclarations(), index, structures.length);
    }
}
exports.VariableDeclarationList = VariableDeclarationList;
