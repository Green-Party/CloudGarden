"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const base_1 = require("../base");
const PrimaryExpression_1 = require("../expression/PrimaryExpression");
exports.IdentifierBase = base_1.ReferenceFindableNode(base_1.RenameableNode(PrimaryExpression_1.PrimaryExpression));
class Identifier extends exports.IdentifierBase {
    /**
     * Gets the text for the identifier.
     */
    getText() {
        return this.compilerNode.text;
    }
    /**
     * Gets the definition nodes of the identifier.
     * @remarks This is similar to "go to definition" and `.getDefinitions()`, but only returns the nodes.
     */
    getDefinitionNodes() {
        return this.getDefinitions().map(d => d.getDeclarationNode()).filter(d => d != null);
    }
    /**
     * Gets the definitions of the identifier.
     * @remarks This is similar to "go to definition." Use `.getDefinitionNodes()` if you only care about the nodes.
     */
    getDefinitions() {
        return this._context.languageService.getDefinitions(this);
    }
    /**
     * Gets the implementations of the identifier.
     *
     * This is similar to "go to implementation."
     */
    getImplementations() {
        return this._context.languageService.getImplementations(this);
    }
}
exports.Identifier = Identifier;
