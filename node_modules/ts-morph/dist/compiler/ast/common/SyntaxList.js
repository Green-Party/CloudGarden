"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../manipulation");
const utils_1 = require("../../../utils");
const Node_1 = require("./Node");
class SyntaxList extends Node_1.Node {
    /**
     * Adds text at the end of the current children.
     * @param textOrWriterFunction - Text to add or function that provides a writer to write with.
     * @returns The children that were added.
     */
    addChildText(textOrWriterFunction) {
        return this.insertChildText(this.getChildCount(), textOrWriterFunction);
    }
    /**
     * Inserts text at the specified child index.
     * @param index - Child index to insert at.
     * @param textOrWriterFunction - Text to insert or function that provides a writer to write with.
     * @returns The children that were inserted.
     */
    insertChildText(index, textOrWriterFunction) {
        // get index
        const initialChildCount = this.getChildCount();
        const newLineKind = this._context.manipulationSettings.getNewLineKindAsString();
        const parent = this.getParentOrThrow();
        index = manipulation_1.verifyAndGetIndex(index, initialChildCount);
        // get text
        const isInline = this !== parent.getChildSyntaxList();
        let insertText = utils_1.getTextFromStringOrWriter(isInline ? parent._getWriterWithQueuedChildIndentation() : parent._getWriterWithChildIndentation(), textOrWriterFunction);
        if (insertText.length === 0)
            return [];
        if (isInline) {
            if (index === 0)
                insertText += " ";
            else
                insertText = " " + insertText;
        }
        else {
            if (index === 0 && utils_1.TypeGuards.isSourceFile(parent)) {
                if (!insertText.endsWith("\n"))
                    insertText += newLineKind;
            }
            else {
                insertText = newLineKind + insertText;
                // remove the last newline if inserting to the end of a node that's not a source file
                if (!utils_1.TypeGuards.isSourceFile(parent) && index === initialChildCount && insertText.endsWith("\n"))
                    insertText = insertText.replace(/\r?\n$/, "");
            }
        }
        // insert
        const insertPos = manipulation_1.getInsertPosFromIndex(index, this, this.getChildren());
        manipulation_1.insertIntoParentTextRange({
            insertPos,
            newText: insertText,
            parent: this
        });
        // get inserted children
        const finalChildren = this.getChildren();
        return manipulation_1.getNodesToReturn(finalChildren, index, finalChildren.length - initialChildCount);
    }
}
exports.SyntaxList = SyntaxList;
