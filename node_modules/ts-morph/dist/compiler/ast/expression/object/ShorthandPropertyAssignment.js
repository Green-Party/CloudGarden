"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../../errors");
const manipulation_1 = require("../../../../manipulation");
const typescript_1 = require("../../../../typescript");
const base_1 = require("../../base");
const structures_1 = require("../../../../structures");
const callBaseGetStructure_1 = require("../../callBaseGetStructure");
const callBaseSet_1 = require("../../callBaseSet");
const ObjectLiteralElement_1 = require("./ObjectLiteralElement");
// This node only has an object assignment initializer, equals token, and question token, in order to tell the user about bad code
// (See https://github.com/Microsoft/TypeScript/pull/5121/files)
exports.ShorthandPropertyAssignmentBase = base_1.InitializerExpressionGetableNode(base_1.QuestionTokenableNode(base_1.NamedNode(ObjectLiteralElement_1.ObjectLiteralElement)));
class ShorthandPropertyAssignment extends exports.ShorthandPropertyAssignmentBase {
    /**
     * Gets if the shorthand property assignment has an object assignment initializer.
     */
    hasObjectAssignmentInitializer() {
        return this.compilerNode.objectAssignmentInitializer != null;
    }
    /**
     * Gets the object assignment initializer or throws if it doesn't exist.
     */
    getObjectAssignmentInitializerOrThrow() {
        return errors.throwIfNullOrUndefined(this.getObjectAssignmentInitializer(), "Expected to find an object assignment initializer.");
    }
    /**
     * Gets the object assignment initializer if it exists.
     */
    getObjectAssignmentInitializer() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.objectAssignmentInitializer);
    }
    /**
     * Gets the equals token or throws if it doesn't exist.
     */
    getEqualsTokenOrThrow() {
        return errors.throwIfNullOrUndefined(this.getEqualsToken(), "Expected to find an equals token.");
    }
    /**
     * Gets the equals token if it exists.
     */
    getEqualsToken() {
        const equalsToken = this.compilerNode.equalsToken;
        if (equalsToken == null)
            return undefined;
        return this._getNodeFromCompilerNode(equalsToken);
    }
    /**
     * Remove the object assignment initializer.
     *
     * This is only useful to remove bad code.
     */
    removeObjectAssignmentInitializer() {
        if (!this.hasObjectAssignmentInitializer())
            return this;
        manipulation_1.removeChildren({
            children: [this.getEqualsTokenOrThrow(), this.getObjectAssignmentInitializerOrThrow()],
            removePrecedingSpaces: true
        });
        return this;
    }
    /**
     * Sets the initializer.
     *
     * Note: The current node will no longer be valid because it's no longer a shorthand property assignment.
     * @param text - New text to set for the initializer.
     */
    setInitializer(text) {
        const parent = this.getParentSyntaxList() || this.getParentOrThrow();
        const childIndex = this.getChildIndex();
        manipulation_1.insertIntoParentTextRange({
            insertPos: this.getStart(),
            newText: this.getText() + `: ${text}`,
            parent,
            replacing: {
                textLength: this.getWidth()
            }
        });
        return parent.getChildAtIndexIfKindOrThrow(childIndex, typescript_1.SyntaxKind.PropertyAssignment);
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.ShorthandPropertyAssignmentBase.prototype, this, structure);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        const structure = callBaseGetStructure_1.callBaseGetStructure(exports.ShorthandPropertyAssignmentBase.prototype, this, {
            kind: structures_1.StructureKind.ShorthandPropertyAssignment
        });
        // remove since this is only used to tell the user about incorrect code
        delete structure.hasQuestionToken;
        return structure;
    }
}
exports.ShorthandPropertyAssignment = ShorthandPropertyAssignment;
