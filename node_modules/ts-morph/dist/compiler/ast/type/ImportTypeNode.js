"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const manipulation_1 = require("../../../manipulation");
const typescript_1 = require("../../../typescript");
const utils_1 = require("../../../utils");
const base_1 = require("../base");
const TypeNode_1 = require("./TypeNode");
exports.ImportTypeNodeBase = base_1.TypeArgumentedNode(TypeNode_1.TypeNode);
class ImportTypeNode extends exports.ImportTypeNodeBase {
    /**
     * Sets the argument text.
     * @param text - Text of the argument.
     */
    setArgument(text) {
        const arg = this.getArgument();
        if (utils_1.TypeGuards.isLiteralTypeNode(arg)) {
            const literal = arg.getLiteral();
            if (utils_1.TypeGuards.isStringLiteral(literal)) {
                literal.setLiteralValue(text);
                return this;
            }
        }
        arg.replaceWithText(writer => writer.quote(text), this._getWriterWithQueuedChildIndentation());
        return this;
    }
    /**
     * Gets the argument passed into the import type.
     */
    getArgument() {
        return this._getNodeFromCompilerNode(this.compilerNode.argument);
    }
    /**
     * Sets the qualifier text.
     * @param text - Text.
     */
    setQualifier(text) {
        const qualifier = this.getQualifier();
        if (qualifier != null)
            qualifier.replaceWithText(text, this._getWriterWithQueuedChildIndentation());
        else {
            const paren = this.getFirstChildByKindOrThrow(typescript_1.SyntaxKind.CloseParenToken);
            manipulation_1.insertIntoParentTextRange({
                insertPos: paren.getEnd(),
                parent: this,
                newText: this._getWriterWithQueuedIndentation().write(".").write(text).toString()
            });
        }
        return this;
    }
    /**
     * Gets the qualifier of the import type if it exists or throws
     */
    getQualifierOrThrow() {
        return errors.throwIfNullOrUndefined(this.getQualifier(), () => `Expected to find a qualifier for the import type: ${this.getText()}`);
    }
    /**
     * Gets the qualifier of the import type if it exists or returns undefined.
     */
    getQualifier() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.qualifier);
    }
}
exports.ImportTypeNode = ImportTypeNode;
