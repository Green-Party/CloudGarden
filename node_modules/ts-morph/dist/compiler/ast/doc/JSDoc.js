"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../manipulation");
const textSeek_1 = require("../../../manipulation/textSeek");
const utils_1 = require("../../../utils");
const common_1 = require("../common");
const structures_1 = require("../../../structures");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
const callBaseSet_1 = require("../callBaseSet");
exports.JSDocBase = common_1.Node;
/**
 * JS doc node.
 */
class JSDoc extends exports.JSDocBase {
    /**
     * Gets the tags of the JSDoc.
     */
    getTags() {
        const tags = this.compilerNode.tags;
        if (tags == null)
            return [];
        return tags.map(t => this._getNodeFromCompilerNode(t));
    }
    /**
     * Gets the comment.
     */
    getComment() {
        return this.compilerNode.comment;
    }
    /**
     * Gets the JSDoc's text without the surrounding comment.
     */
    getInnerText() {
        const innerTextWithStars = this.getText().replace(/^\/\*\*[^\S\n]*\n?/, "").replace(/(\r?\n)?[^\S\n]*\*\/$/, "");
        return innerTextWithStars.split(/\n/).map(line => {
            const starPos = line.indexOf("*");
            if (starPos === -1)
                return line;
            const substringStart = line[starPos + 1] === " " ? starPos + 2 : starPos + 1;
            return line.substring(substringStart);
        }).join("\n");
    }
    /**
     * Sets the comment.
     * @param textOrWriterFunction - Text or writer function to set.
     */
    setComment(textOrWriterFunction) {
        const tags = this.getTags();
        const startEditPos = this.getStart() + 3;
        const endEditPos = tags.length > 0 ? textSeek_1.getPreviousMatchingPos(this._sourceFile.getFullText(), tags[0].getStart(), c => c === "*") - 1 : this.getEnd() - 2;
        const indentationText = this.getIndentationText();
        const newLineKind = this._context.manipulationSettings.getNewLineKindAsString();
        const text = utils_1.getTextFromStringOrWriter(this._getWriter(), textOrWriterFunction);
        const lines = text.split(/\r?\n/).map(l => l.length === 0 ? `${indentationText} *` : `${indentationText} * ${l}`).join(newLineKind);
        const newText = newLineKind + lines + newLineKind + indentationText + " ";
        manipulation_1.replaceTextPossiblyCreatingChildNodes({
            parent: this,
            newText,
            replacePos: startEditPos,
            replacingLength: endEditPos - startEditPos
        });
        return this;
    }
    /**
     * Removes this JSDoc.
     */
    remove() {
        manipulation_1.removeChildren({
            children: [this],
            removeFollowingSpaces: true,
            removeFollowingNewLines: true
        });
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.JSDocBase.prototype, this, structure);
        if (structure.description != null)
            this.setComment(structure.description);
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.JSDocBase.prototype, this, {
            kind: structures_1.StructureKind.JSDoc,
            description: this.getInnerText() // good enough for now
        });
    }
}
exports.JSDoc = JSDoc;
