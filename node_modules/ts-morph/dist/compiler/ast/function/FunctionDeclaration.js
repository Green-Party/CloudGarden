"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const manipulation_1 = require("../../../manipulation");
const getStructureFuncs = require("../../../manipulation/helpers/getStructureFunctions");
const structures_1 = require("../../../structures");
const typescript_1 = require("../../../typescript");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const statement_1 = require("../statement");
const module_1 = require("../module");
const FunctionLikeDeclaration_1 = require("./FunctionLikeDeclaration");
const OverloadableNode_1 = require("./OverloadableNode");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
exports.FunctionDeclarationBase = base_1.UnwrappableNode(base_1.TextInsertableNode(OverloadableNode_1.OverloadableNode(base_1.BodyableNode(base_1.AsyncableNode(base_1.GeneratorableNode(base_1.AmbientableNode(base_1.ExportableNode(FunctionLikeDeclaration_1.FunctionLikeDeclaration(module_1.NamespaceChildableNode(base_1.NameableNode(statement_1.Statement)))))))))));
exports.FunctionDeclarationOverloadBase = base_1.UnwrappableNode(base_1.TextInsertableNode(base_1.AsyncableNode(base_1.GeneratorableNode(base_1.ModifierableNode(base_1.SignaturedDeclaration(base_1.AmbientableNode(module_1.NamespaceChildableNode(base_1.JSDocableNode(base_1.TypeParameteredNode(base_1.ExportableNode(base_1.ModifierableNode(statement_1.Statement))))))))))));
class FunctionDeclaration extends exports.FunctionDeclarationBase {
    /**
     * Adds a function overload.
     * @param structure - Structure of the overload.
     */
    addOverload(structure) {
        return this.addOverloads([structure])[0];
    }
    /**
     * Adds function overloads.
     * @param structures - Structures of the overloads.
     */
    addOverloads(structures) {
        return this.insertOverloads(this.getOverloads().length, structures);
    }
    /**
     * Inserts a function overload.
     * @param index - Child index to insert at.
     * @param structure - Structure of the overload.
     */
    insertOverload(index, structure) {
        return this.insertOverloads(index, [structure])[0];
    }
    /**
     * Inserts function overloads.
     * @param index - Child index to insert at.
     * @param structure - Structures of the overloads.
     */
    insertOverloads(index, structures) {
        const thisName = this.getName();
        const childCodes = structures.map(structure => `function ${thisName}();`);
        return OverloadableNode_1.insertOverloads({
            node: this,
            index,
            structures,
            childCodes,
            getThisStructure: getStructureFuncs.fromFunctionDeclarationOverload,
            setNodeFromStructure: (node, structure) => node.set(structure),
            expectedSyntaxKind: typescript_1.SyntaxKind.FunctionDeclaration
        });
    }
    /**
     * Removes this function declaration.
     */
    remove() {
        manipulation_1.removeOverloadableStatementedNodeChild(this);
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.FunctionDeclarationBase.prototype, this, structure);
        if (structure.overloads != null) {
            this.getOverloads().forEach(o => o.remove());
            this.addOverloads(structure.overloads);
        }
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        const isOverload = this.isOverload();
        const hasImplementation = this.getImplementation();
        const basePrototype = isOverload && hasImplementation ? exports.FunctionDeclarationOverloadBase.prototype : exports.FunctionDeclarationBase.prototype;
        return callBaseGetStructure_1.callBaseGetStructure(basePrototype, this, getStructure(this));
        function getStructure(thisNode) {
            if (hasImplementation && isOverload)
                return getOverloadSpecificStructure();
            return getSpecificStructure();
            function getOverloadSpecificStructure() {
                return { kind: structures_1.StructureKind.FunctionOverload };
            }
            function getSpecificStructure() {
                if (!hasImplementation)
                    return { kind: structures_1.StructureKind.Function };
                else
                    return {
                        kind: structures_1.StructureKind.Function,
                        overloads: thisNode.getOverloads().map(o => o.getStructure())
                    };
            }
        }
    }
}
exports.FunctionDeclaration = FunctionDeclaration;
