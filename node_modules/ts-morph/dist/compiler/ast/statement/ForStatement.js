"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const IterationStatement_1 = require("./IterationStatement");
exports.ForStatementBase = IterationStatement_1.IterationStatement;
class ForStatement extends exports.ForStatementBase {
    /**
     * Gets this for statement's initializer or undefined if none exists.
     */
    getInitializer() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.initializer);
    }
    /**
     * Gets this for statement's initializer or throws if none exists.
     */
    getInitializerOrThrow() {
        return errors.throwIfNullOrUndefined(this.getInitializer(), "Expected to find an initializer.");
    }
    /**
     * Gets this for statement's condition or undefined if none exists.
     */
    getCondition() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.condition);
    }
    /**
     * Gets this for statement's condition or throws if none exists.
     */
    getConditionOrThrow() {
        return errors.throwIfNullOrUndefined(this.getCondition(), "Expected to find a condition.");
    }
    /**
     * Gets this for statement's incrementor.
     */
    getIncrementor() {
        return this._getNodeFromCompilerNodeIfExists(this.compilerNode.incrementor);
    }
    /**
     * Gets this for statement's incrementor or throws if none exists.
     */
    getIncrementorOrThrow() {
        return errors.throwIfNullOrUndefined(this.getIncrementor(), "Expected to find an incrementor.");
    }
}
exports.ForStatement = ForStatement;
