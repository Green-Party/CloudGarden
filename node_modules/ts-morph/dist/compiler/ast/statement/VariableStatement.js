"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const structures_1 = require("../../../structures");
const base_1 = require("../base");
const callBaseSet_1 = require("../callBaseSet");
const module_1 = require("../module");
const Statement_1 = require("./Statement");
const callBaseGetStructure_1 = require("../callBaseGetStructure");
exports.VariableStatementBase = module_1.NamespaceChildableNode(base_1.JSDocableNode(base_1.AmbientableNode(base_1.ExportableNode(base_1.ModifierableNode(Statement_1.Statement)))));
class VariableStatement extends exports.VariableStatementBase {
    /**
     * Get variable declaration list.
     */
    getDeclarationList() {
        return this._getNodeFromCompilerNode(this.compilerNode.declarationList);
    }
    /**
     * Get the variable declarations.
     */
    getDeclarations() {
        return this.getDeclarationList().getDeclarations();
    }
    /**
     * Gets the variable declaration kind.
     */
    getDeclarationKind() {
        return this.getDeclarationList().getDeclarationKind();
    }
    /**
     * Gets the variable declaration kind keyword.
     */
    getDeclarationKindKeyword() {
        return this.getDeclarationList().getDeclarationKindKeyword();
    }
    /**
     * Sets the variable declaration kind.
     * @param type - Type to set.
     */
    setDeclarationKind(type) {
        return this.getDeclarationList().setDeclarationKind(type);
    }
    /**
     * Add a variable declaration to the statement.
     * @param structure - Structure representing the variable declaration to add.
     */
    addDeclaration(structure) {
        return this.getDeclarationList().addDeclaration(structure);
    }
    /**
     * Adds variable declarations to the statement.
     * @param structures - Structures representing the variable declarations to add.
     */
    addDeclarations(structures) {
        return this.getDeclarationList().addDeclarations(structures);
    }
    /**
     * Inserts a variable declaration at the specified index within the statement.
     * @param index - Child index to insert at.
     * @param structure - Structure representing the variable declaration to insert.
     */
    insertDeclaration(index, structure) {
        return this.getDeclarationList().insertDeclaration(index, structure);
    }
    /**
     * Inserts variable declarations at the specified index within the statement.
     * @param index - Child index to insert at.
     * @param structures - Structures representing the variable declarations to insert.
     */
    insertDeclarations(index, structures) {
        return this.getDeclarationList().insertDeclarations(index, structures);
    }
    /**
     * Sets the node from a structure.
     * @param structure - Structure to set the node with.
     */
    set(structure) {
        callBaseSet_1.callBaseSet(exports.VariableStatementBase.prototype, this, structure);
        if (structure.declarationKind != null)
            this.setDeclarationKind(structure.declarationKind);
        if (structure.declarations != null) {
            const existingDeclarations = this.getDeclarations();
            this.addDeclarations(structure.declarations);
            existingDeclarations.forEach(d => d.remove());
        }
        return this;
    }
    /**
     * Gets the structure equivalent to this node.
     */
    getStructure() {
        return callBaseGetStructure_1.callBaseGetStructure(exports.VariableStatementBase.prototype, this, {
            kind: structures_1.StructureKind.VariableStatement,
            declarationKind: this.getDeclarationKind(),
            declarations: this.getDeclarations().map(declaration => declaration.getStructure())
        });
    }
}
exports.VariableStatement = VariableStatement;
