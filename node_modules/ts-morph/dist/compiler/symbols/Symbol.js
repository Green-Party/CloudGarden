"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../errors");
const typescript_1 = require("../../typescript");
const utils_1 = require("../../utils");
class Symbol {
    /**
     * Gets the underlying compiler symbol.
     */
    get compilerSymbol() {
        return this._compilerSymbol;
    }
    /**
     * Initializes a new instance of Symbol.
     * @private
     * @param context - Project context.
     * @param symbol - Compiler symbol.
     */
    constructor(context, symbol) {
        this._context = context;
        this._compilerSymbol = symbol;
        // wrap these immediately, but do not memoize because the underlying symbol might be mutated
        this.getValueDeclaration();
        this.getDeclarations();
    }
    /**
     * Gets the symbol name.
     */
    getName() {
        return this.compilerSymbol.getName();
    }
    /**
     * Gets the escaped name.
     */
    getEscapedName() {
        return this.compilerSymbol.getEscapedName();
    }
    /**
     * Gets the aliased symbol or throws if it doesn't exist.
     */
    getAliasedSymbolOrThrow() {
        return errors.throwIfNullOrUndefined(this.getAliasedSymbol(), "Expected to find an aliased symbol.");
    }
    /**
     * Gets the aliased symbol or returns undefined if it doesn't exist.
     */
    getAliasedSymbol() {
        return this._context.typeChecker.getAliasedSymbol(this);
    }
    /**
     * Gets if the symbol is an alias.
     */
    isAlias() {
        return (this.getFlags() & typescript_1.SymbolFlags.Alias) === typescript_1.SymbolFlags.Alias;
    }
    /**
     * Gets the symbol flags.
     */
    getFlags() {
        return this.compilerSymbol.getFlags();
    }
    /**
     * Gets if the symbol has the specified flags.
     * @param flags - Flags to check if the symbol has.
     */
    hasFlags(flags) {
        return (this.compilerSymbol.flags & flags) === flags;
    }
    /**
     * Gets the value declaration of a symbol or throws if it doesn't exist.
     */
    getValueDeclarationOrThrow() {
        return errors.throwIfNullOrUndefined(this.getValueDeclaration(), () => `Expected to find the value declaration of symbol '${this.getName()}'.`);
    }
    /**
     * Gets the value declaration of the symbol or returns undefined if it doesn't exist.
     */
    getValueDeclaration() {
        const declaration = this.compilerSymbol.valueDeclaration;
        if (declaration == null)
            return undefined;
        return this._context.compilerFactory.getNodeFromCompilerNode(declaration, this._context.compilerFactory.getSourceFileForNode(declaration));
    }
    /**
     * Gets the symbol declarations.
     */
    getDeclarations() {
        return (this.compilerSymbol.declarations || []).map(d => this._context.compilerFactory.getNodeFromCompilerNode(d, this._context.compilerFactory.getSourceFileForNode(d)));
    }
    /**
     * Gets the export of the symbol by the specified name or throws if not exists.
     * @param name - Name of the export.
     */
    getExportOrThrow(name) {
        return errors.throwIfNullOrUndefined(this.getExport(name), `Expected to find export with name: ${name}`);
    }
    /**
     * Gets the export of the symbol by the specified name or returns undefined if not exists.
     * @param name - Name of the export.
     */
    getExport(name) {
        if (this.compilerSymbol.exports == null)
            return undefined;
        const tsSymbol = this.compilerSymbol.exports.get(name);
        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);
    }
    /**
     * Gets the exports from the symbol.
     */
    getExports() {
        if (this.compilerSymbol.exports == null)
            return [];
        return utils_1.ArrayUtils.from(this.compilerSymbol.exports.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));
    }
    /**
     * Gets the global export of the symbol by the specified name or throws if not exists.
     * @param name - Name of the global export.
     */
    getGlobalExportOrThrow(name) {
        return errors.throwIfNullOrUndefined(this.getGlobalExport(name), `Expected to find global export with name: ${name}`);
    }
    /**
     * Gets the global export of the symbol by the specified name or returns undefined if not exists.
     * @param name - Name of the global export.
     */
    getGlobalExport(name) {
        if (this.compilerSymbol.globalExports == null)
            return undefined;
        const tsSymbol = this.compilerSymbol.globalExports.get(name);
        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);
    }
    /**
     * Gets the global exports from the symbol.
     */
    getGlobalExports() {
        if (this.compilerSymbol.globalExports == null)
            return [];
        return utils_1.ArrayUtils.from(this.compilerSymbol.globalExports.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));
    }
    /**
     * Gets the member of the symbol by the specified name or throws if not exists.
     * @param name - Name of the export.
     */
    getMemberOrThrow(name) {
        return errors.throwIfNullOrUndefined(this.getMember(name), `Expected to find member with name: ${name}`);
    }
    /**
     * Gets the member of the symbol by the specified name or returns undefined if not exists.
     * @param name - Name of the member.
     */
    getMember(name) {
        if (this.compilerSymbol.members == null)
            return undefined;
        const tsSymbol = this.compilerSymbol.members.get(name);
        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);
    }
    /**
     * Gets the members of the symbol
     */
    getMembers() {
        if (this.compilerSymbol.members == null)
            return [];
        return utils_1.ArrayUtils.from(this.compilerSymbol.members.values()).map(symbol => this._context.compilerFactory.getSymbol(symbol));
    }
    /**
     * Gets the declared type of the symbol.
     */
    getDeclaredType() {
        return this._context.typeChecker.getDeclaredTypeOfSymbol(this);
    }
    /**
     * Gets the type of the symbol at a location.
     * @param node - Location to get the type at for this symbol.
     */
    getTypeAtLocation(node) {
        return this._context.typeChecker.getTypeOfSymbolAtLocation(this, node);
    }
    /**
     * Gets the fully qualified name.
     */
    getFullyQualifiedName() {
        return this._context.typeChecker.getFullyQualifiedName(this);
    }
}
exports.Symbol = Symbol;
