"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../errors");
const typescript_1 = require("../../typescript");
const utils_1 = require("../../utils");
class Type {
    /**
     * Initializes a new instance of Type.
     * @private
     * @param context - Project context.
     * @param type - Compiler type.
     */
    constructor(context, type) {
        this._context = context;
        this._compilerType = type;
    }
    /**
     * Gets the underlying compiler type.
     */
    get compilerType() {
        return this._compilerType;
    }
    /**
     * Gets the type text.
     * @param enclosingNode - The enclosing node.
     * @param typeFormatFlags - Format flags for the type text.
     */
    getText(enclosingNode, typeFormatFlags) {
        return this._context.typeChecker.getTypeText(this, enclosingNode, typeFormatFlags);
    }
    /**
     * Gets the alias symbol if it exists.
     */
    getAliasSymbol() {
        return this.compilerType.aliasSymbol == null ? undefined : this._context.compilerFactory.getSymbol(this.compilerType.aliasSymbol);
    }
    /**
     * Gets the alias symbol if it exists, or throws.
     */
    getAliasSymbolOrThrow() {
        return errors.throwIfNullOrUndefined(this.getAliasSymbol(), "Expected to find an alias symbol.");
    }
    /**
     * Gets the alias type arguments.
     */
    getAliasTypeArguments() {
        const aliasTypeArgs = this.compilerType.aliasTypeArguments || [];
        return aliasTypeArgs.map(t => this._context.compilerFactory.getType(t));
    }
    /**
     * Gets the apparent type.
     */
    getApparentType() {
        return this._context.typeChecker.getApparentType(this);
    }
    /**
     * Gets the array element type or throws if it doesn't exist (ex. for `T[]` it would be `T`).
     */
    getArrayElementTypeOrThrow() {
        return errors.throwIfNullOrUndefined(this.getArrayElementType(), "Expected to find an array element type.");
    }
    /**
     * Gets the array element type or returns undefined if it doesn't exist (ex. for `T[]` it would be `T`).
     */
    getArrayElementType() {
        if (!this.isArray())
            return undefined;
        return this.getTypeArguments()[0];
    }
    /**
     * Gets the base types.
     */
    getBaseTypes() {
        const baseTypes = this.compilerType.getBaseTypes() || [];
        return baseTypes.map(t => this._context.compilerFactory.getType(t));
    }
    /**
     * Gets the base type of a literal type.
     *
     * For example, for a number literal type it will return the number type.
     */
    getBaseTypeOfLiteralType() {
        return this._context.typeChecker.getBaseTypeOfLiteralType(this);
    }
    /**
     * Gets the call signatures.
     */
    getCallSignatures() {
        return this.compilerType.getCallSignatures().map(s => this._context.compilerFactory.getSignature(s));
    }
    /**
     * Gets the construct signatures.
     */
    getConstructSignatures() {
        return this.compilerType.getConstructSignatures().map(s => this._context.compilerFactory.getSignature(s));
    }
    /**
     * Gets the constraint or throws if it doesn't exist.
     */
    getConstraintOrThrow() {
        return errors.throwIfNullOrUndefined(this.getConstraint(), "Expected to find a constraint.");
    }
    /**
     * Gets the constraint or returns undefined if it doesn't exist.
     */
    getConstraint() {
        const constraint = this.compilerType.getConstraint();
        return constraint == null ? undefined : this._context.compilerFactory.getType(constraint);
    }
    /**
     * Gets the default type or throws if it doesn't exist.
     */
    getDefaultOrThrow() {
        return errors.throwIfNullOrUndefined(this.getDefault(), "Expected to find a constraint.");
    }
    /**
     * Gets the default type or returns undefined if it doesn't exist.
     */
    getDefault() {
        const defaultType = this.compilerType.getDefault();
        return defaultType == null ? undefined : this._context.compilerFactory.getType(defaultType);
    }
    /**
     * Gets the properties of the type.
     */
    getProperties() {
        return this.compilerType.getProperties().map(s => this._context.compilerFactory.getSymbol(s));
    }
    getProperty(nameOrFindFunction) {
        return utils_1.getSymbolByNameOrFindFunction(this.getProperties(), nameOrFindFunction);
    }
    /**
     * Gets the apparent properties of the type.
     */
    getApparentProperties() {
        return this.compilerType.getApparentProperties().map(s => this._context.compilerFactory.getSymbol(s));
    }
    getApparentProperty(nameOrFindFunction) {
        return utils_1.getSymbolByNameOrFindFunction(this.getApparentProperties(), nameOrFindFunction);
    }
    /**
     * Gets if the type is possibly null or undefined.
     */
    isNullable() {
        return this.getUnionTypes().some(t => t.isNull() || t.isUndefined());
    }
    /**
     * Gets the non-nullable type.
     */
    getNonNullableType() {
        return this._context.compilerFactory.getType(this.compilerType.getNonNullableType());
    }
    /**
     * Gets the number index type.
     */
    getNumberIndexType() {
        const numberIndexType = this.compilerType.getNumberIndexType();
        return numberIndexType == null ? undefined : this._context.compilerFactory.getType(numberIndexType);
    }
    /**
     * Gets the string index type.
     */
    getStringIndexType() {
        const stringIndexType = this.compilerType.getStringIndexType();
        return stringIndexType == null ? undefined : this._context.compilerFactory.getType(stringIndexType);
    }
    /**
     * Gets the target type of a type reference if it exists.
     */
    getTargetType() {
        const targetType = this.compilerType.target || undefined;
        return targetType == null ? undefined : this._context.compilerFactory.getType(targetType);
    }
    /**
     * Gets the target type of a type reference or throws if it doesn't exist.
     */
    getTargetTypeOrThrow() {
        return errors.throwIfNullOrUndefined(this.getTargetType(), "Expected to find the target type.");
    }
    /**
     * Gets type arguments.
     */
    getTypeArguments() {
        const typeArguments = this.compilerType.typeArguments || [];
        return typeArguments.map(t => this._context.compilerFactory.getType(t));
    }
    /**
     * Gets the individual element types of the tuple.
     */
    getTupleElements() {
        return this.isTuple() ? this.getTypeArguments() : [];
    }
    /**
     * Gets the union types (ex. for `T | U` it returns the array `[T, U]`).
     */
    getUnionTypes() {
        if (!this.isUnion())
            return [];
        return this.compilerType.types.map(t => this._context.compilerFactory.getType(t));
    }
    /**
     * Gets the intersection types (ex. for `T & U` it returns the array `[T, U]`).
     */
    getIntersectionTypes() {
        if (!this.isIntersection())
            return [];
        return this.compilerType.types.map(t => this._context.compilerFactory.getType(t));
    }
    /**
     * Gets the symbol of the type.
     */
    getSymbol() {
        const tsSymbol = this.compilerType.getSymbol();
        return tsSymbol == null ? undefined : this._context.compilerFactory.getSymbol(tsSymbol);
    }
    /**
     * Gets the symbol of the type or throws.
     */
    getSymbolOrThrow() {
        return errors.throwIfNullOrUndefined(this.getSymbol(), "Expected to find a symbol.");
    }
    /**
     * Gets if this is an anonymous type.
     */
    isAnonymous() {
        return this._hasObjectFlag(typescript_1.ObjectFlags.Anonymous);
    }
    /**
     * Gets if this is an any type.
     */
    isAny() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Any);
    }
    /**
     * Gets if this is an array type.
     */
    isArray() {
        const symbol = this.getSymbol();
        if (symbol == null)
            return false;
        return symbol.getName() === "Array" && this.getTypeArguments().length === 1;
    }
    /**
     * Gets if this is a boolean type.
     */
    isBoolean() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Boolean);
    }
    /**
     * Gets if this is a string type.
     */
    isString() {
        return this._hasTypeFlag(typescript_1.TypeFlags.String);
    }
    /**
     * Gets if this is a number type.
     */
    isNumber() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Number);
    }
    /**
     * Gets if this is a literal type.
     */
    isLiteral() {
        // todo: remove this in TS 3.1 when https://github.com/Microsoft/TypeScript/issues/26075 is fixed
        const isBooleanLiteralForTs3_0 = this.isBooleanLiteral();
        return this.compilerType.isLiteral() || isBooleanLiteralForTs3_0;
    }
    /**
     * Gets if this is a boolean literal type.
     */
    isBooleanLiteral() {
        return this._hasTypeFlag(typescript_1.TypeFlags.BooleanLiteral);
    }
    /**
     * Gets if this is an enum literal type.
     */
    isEnumLiteral() {
        return this._hasTypeFlag(typescript_1.TypeFlags.EnumLiteral) && !this.isUnion();
    }
    /**
     * Gets if this is a number literal type.
     */
    isNumberLiteral() {
        return this._hasTypeFlag(typescript_1.TypeFlags.NumberLiteral);
    }
    /**
     * Gets if this is a string literal type.
     */
    isStringLiteral() {
        return this.compilerType.isStringLiteral();
    }
    /**
     * Gets if this is a class type.
     */
    isClass() {
        return this.compilerType.isClass();
    }
    /**
     * Gets if this is a class or interface type.
     */
    isClassOrInterface() {
        return this.compilerType.isClassOrInterface();
    }
    /**
     * Gets if this is an enum type.
     */
    isEnum() {
        const hasEnumFlag = this._hasTypeFlag(typescript_1.TypeFlags.Enum);
        if (hasEnumFlag)
            return true;
        if (this.isEnumLiteral() && !this.isUnion())
            return false;
        const symbol = this.getSymbol();
        if (symbol == null)
            return false;
        const valueDeclaration = symbol.getValueDeclaration();
        return valueDeclaration != null && utils_1.TypeGuards.isEnumDeclaration(valueDeclaration);
    }
    /**
     * Gets if this is an interface type.
     */
    isInterface() {
        return this._hasObjectFlag(typescript_1.ObjectFlags.Interface);
    }
    /**
     * Gets if this is an object type.
     */
    isObject() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Object);
    }
    /**
     * Gets if this is a type parameter.
     */
    isTypeParameter() {
        return this.compilerType.isTypeParameter();
    }
    /**
     * Gets if this is a tuple type.
     */
    isTuple() {
        const targetType = this.getTargetType();
        if (targetType == null)
            return false;
        return targetType._hasObjectFlag(typescript_1.ObjectFlags.Tuple);
    }
    /**
     * Gets if this is a union type.
     */
    isUnion() {
        return this.compilerType.isUnion();
    }
    /**
     * Gets if this is an intersection type.
     */
    isIntersection() {
        return this.compilerType.isIntersection();
    }
    /**
     * Gets if this is a union or intersection type.
     */
    isUnionOrIntersection() {
        return this.compilerType.isUnionOrIntersection();
    }
    /**
     * Gets if this is the unknown type.
     */
    isUnknown() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Unknown);
    }
    /**
     * Gets if this is the null type.
     */
    isNull() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Null);
    }
    /**
     * Gets if this is the undefined type.
     */
    isUndefined() {
        return this._hasTypeFlag(typescript_1.TypeFlags.Undefined);
    }
    /**
     * Gets the type flags.
     */
    getFlags() {
        return this.compilerType.flags;
    }
    /**
     * Gets the object flags.
     * @remarks Returns 0 for a non-object type.
     */
    getObjectFlags() {
        if (!this.isObject())
            return 0;
        return this.compilerType.objectFlags || 0;
    }
    _hasTypeFlag(flag) {
        return (this.compilerType.flags & flag) === flag;
    }
    _hasObjectFlag(flag) {
        return (this.getObjectFlags() & flag) === flag;
    }
}
exports.Type = Type;
