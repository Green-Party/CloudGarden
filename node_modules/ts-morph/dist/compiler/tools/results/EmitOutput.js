"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils");
const OutputFile_1 = require("./OutputFile");
/**
 * Output of an emit on a single file.
 */
class EmitOutput {
    /**
     * @private
     */
    constructor(context, _filePath, compilerObject) {
        this._filePath = _filePath;
        this._context = context;
        this._compilerObject = compilerObject;
    }
    /**
     * TypeScript compiler emit result.
     */
    get compilerObject() {
        return this._compilerObject;
    }
    /**
     * Gets if the emit was skipped.
     */
    getEmitSkipped() {
        return this.compilerObject.emitSkipped;
    }
    /**
     * Gets the output files.
     */
    getOutputFiles() {
        return this.compilerObject.outputFiles.map(f => new OutputFile_1.OutputFile(this._context, f));
    }
}
__decorate([
    utils_1.Memoize
], EmitOutput.prototype, "getOutputFiles", null);
exports.EmitOutput = EmitOutput;
