"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors = require("../../../errors");
const utils_1 = require("../../../utils");
const TextChange_1 = require("./TextChange");
class FileTextChanges {
    /** @private */
    constructor(context, compilerObject) {
        this._context = context;
        this._compilerObject = compilerObject;
        const file = context.compilerFactory.getSourceFileFromCacheFromFilePath(compilerObject.fileName);
        this._existingFileExists = file != null;
        if (!compilerObject.isNewFile)
            this._sourceFile = file;
    }
    /**
     * Gets the file path.
     */
    getFilePath() {
        return this._compilerObject.fileName;
    }
    /**
     * Gets the source file if it was in the cache at the time of this class' creation.
     */
    getSourceFile() {
        return this._sourceFile;
    }
    /**
     * Gets the text changes
     */
    getTextChanges() {
        return this._compilerObject.textChanges.map(c => new TextChange_1.TextChange(c));
    }
    /**
     * Applies the text changes to the file. This modifies and possibly creates a new source file.
     *
     * WARNING: This will forget any previously navigated descendant nodes in the source file.
     * @param options - Options for applying the text changes to the file.
     */
    applyChanges(options = {}) {
        if (this._isApplied)
            return;
        if (this.isNewFile() && this._existingFileExists && !options.overwrite) {
            throw new errors.InvalidOperationError(`Cannot apply file text change for creating a new file when the ` +
                `file exists at path ${this.getFilePath()}. Did you mean to provide the overwrite option?`);
        }
        let file;
        if (this.isNewFile())
            file = this._context.project.createSourceFile(this.getFilePath(), "", { overwrite: options.overwrite });
        else
            file = this.getSourceFile();
        if (file == null) {
            throw new errors.InvalidOperationError(`Cannot apply file text change to modify existing file ` +
                `that doesn't exist at path: ${this.getFilePath()}`);
        }
        file.applyTextChanges(this.getTextChanges());
        this._isApplied = true;
        return this;
    }
    /**
     * Gets if this change is for creating a new file.
     */
    isNewFile() {
        return !!this._compilerObject.isNewFile;
    }
}
__decorate([
    utils_1.Memoize
], FileTextChanges.prototype, "getTextChanges", null);
exports.FileTextChanges = FileTextChanges;
