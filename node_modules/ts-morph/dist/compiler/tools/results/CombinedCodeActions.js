"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils");
const FileTextChanges_1 = require("./FileTextChanges");
/**
 * Represents file changes.
 *
 * @remarks Commands are currently not implemented.
 */
class CombinedCodeActions {
    /** @private */
    constructor(context, compilerObject) {
        this._context = context;
        this._compilerObject = compilerObject;
    }
    /** Gets the compiler object. */
    get compilerObject() {
        return this._compilerObject;
    }
    /** Text changes to apply to each file. */
    getChanges() {
        return this.compilerObject.changes.map(change => new FileTextChanges_1.FileTextChanges(this._context, change));
    }
    /**
     * Executes the combined code actions.
     *
     * WARNING: This will cause all nodes to be forgotten in the changed files.
     * @options - Options used when applying the changes.
     */
    applyChanges(options) {
        for (const change of this.getChanges())
            change.applyChanges(options);
        return this;
    }
}
__decorate([
    utils_1.Memoize
], CombinedCodeActions.prototype, "getChanges", null);
exports.CombinedCodeActions = CombinedCodeActions;
