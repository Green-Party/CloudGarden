"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_1 = require("../../../typescript");
const utils_1 = require("../../../utils");
const DocumentSpan_1 = require("./DocumentSpan");
/**
 * Definition info.
 */
class DefinitionInfo extends DocumentSpan_1.DocumentSpan {
    /**
     * @private
     */
    constructor(context, compilerObject) {
        super(context, compilerObject);
        // fill memoize before the source file is modified
        this.getSourceFile()._doActionPreNextModification(() => this.getDeclarationNode());
    }
    /**
     * Gets the kind.
     */
    getKind() {
        return this.compilerObject.kind;
    }
    /**
     * Gets the name.
     */
    getName() {
        return this.compilerObject.name;
    }
    /**
     * Gets the container kind.
     */
    getContainerKind() {
        return this.compilerObject.containerKind;
    }
    /**
     * Gets the container name.
     */
    getContainerName() {
        return this.compilerObject.containerName;
    }
    /**
     * Gets the declaration node.
     */
    getDeclarationNode() {
        if (this.getKind() === "module" && this.getTextSpan().getLength() === this.getSourceFile().getFullWidth())
            return this.getSourceFile();
        const start = this.getTextSpan().getStart();
        const identifier = findIdentifier(this.getSourceFile());
        return identifier == null ? undefined : identifier.getParentOrThrow();
        function findIdentifier(node) {
            if (node.getKind() === typescript_1.SyntaxKind.Identifier && node.getStart() === start)
                return node;
            for (const child of node._getChildrenIterator()) {
                if (child.getPos() <= start && child.getEnd() >= start)
                    return findIdentifier(child);
            }
            return undefined;
        }
    }
}
__decorate([
    utils_1.Memoize
], DefinitionInfo.prototype, "getDeclarationNode", null);
exports.DefinitionInfo = DefinitionInfo;
