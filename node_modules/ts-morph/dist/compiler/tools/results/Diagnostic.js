"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils");
const DiagnosticMessageChain_1 = require("./DiagnosticMessageChain");
/**
 * Diagnostic.
 */
class Diagnostic {
    /** @private */
    constructor(context, compilerObject) {
        this._context = context;
        this._compilerObject = compilerObject;
        // memoize
        this.getSourceFile();
    }
    /**
     * Gets the underlying compiler diagnostic.
     */
    get compilerObject() {
        return this._compilerObject;
    }
    /**
     * Gets the source file.
     */
    getSourceFile() {
        if (this._context == null)
            return undefined;
        const file = this.compilerObject.file;
        return file == null ? undefined : this._context.compilerFactory.getSourceFile(file, { markInProject: false });
    }
    /**
     * Gets the message text.
     */
    getMessageText() {
        const messageText = this._compilerObject.messageText;
        if (typeof messageText === "string")
            return messageText;
        if (this._context == null)
            return new DiagnosticMessageChain_1.DiagnosticMessageChain(messageText);
        else
            return this._context.compilerFactory.getDiagnosticMessageChain(messageText);
    }
    /**
     * Gets the line number.
     */
    getLineNumber() {
        const sourceFile = this.getSourceFile();
        const start = this.getStart();
        if (sourceFile == null || start == null)
            return undefined;
        return utils_1.StringUtils.getLineNumberAtPos(sourceFile.getFullText(), start);
    }
    /**
     * Gets the start.
     */
    getStart() {
        return this.compilerObject.start;
    }
    /**
     * Gets the length.
     */
    getLength() {
        return this.compilerObject.length;
    }
    /**
     * Gets the diagnostic category.
     */
    getCategory() {
        return this.compilerObject.category;
    }
    /**
     * Gets the code of the diagnostic.
     */
    getCode() {
        return this.compilerObject.code;
    }
    /**
     * Gets the source.
     */
    getSource() {
        return this.compilerObject.source;
    }
}
__decorate([
    utils_1.Memoize
], Diagnostic.prototype, "getSourceFile", null);
exports.Diagnostic = Diagnostic;
