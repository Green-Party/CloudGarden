"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../../../utils");
/**
 * Referenced symbol.
 */
class ReferencedSymbol {
    /**
     * @private
     */
    constructor(context, compilerObject) {
        this._context = context;
        this._compilerObject = compilerObject;
        // it's important to store the references so that the nodes referenced inside will point
        // to the right node in case the user does manipulation between getting this object and getting the references
        this._references = this.compilerObject.references.map(r => context.compilerFactory.getReferenceEntry(r));
    }
    /**
     * Gets the compiler referenced symbol.
     */
    get compilerObject() {
        return this._compilerObject;
    }
    /**
     * Gets the definition.
     */
    getDefinition() {
        return this._context.compilerFactory.getReferencedSymbolDefinitionInfo(this.compilerObject.definition);
    }
    /**
     * Gets the references.
     */
    getReferences() {
        return this._references;
    }
}
__decorate([
    utils_1.Memoize
], ReferencedSymbol.prototype, "getDefinition", null);
exports.ReferencedSymbol = ReferencedSymbol;
